//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.18.7.0 (NJsonSchema v9.10.70.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace MyNamespace {
#pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.18.7.0 (NJsonSchema v9.10.70.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class Client {
        private string _baseUrl = "https://t4e7j4g.restletmocks.net";
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public Client()
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>updateIsConnected</summary>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<UpdateIsConnectedResponse> UpdateIsConnectedAsync(string f, string token, string serverWebAdaptor, string utilityNetworkName)
        {
            return UpdateIsConnectedAsync(f, token, serverWebAdaptor, utilityNetworkName, System.Threading.CancellationToken.None);
        }

        /// <summary>updateIsConnected</summary>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<UpdateIsConnectedResponse> UpdateIsConnectedAsync(string f, string token, string serverWebAdaptor, string utilityNetworkName, System.Threading.CancellationToken cancellationToken)
        {
            if (serverWebAdaptor == null)
                throw new System.ArgumentNullException("serverWebAdaptor");

            if (utilityNetworkName == null)
                throw new System.ArgumentNullException("utilityNetworkName");

            if (f == null)
                throw new System.ArgumentNullException("f");

            if (token == null)
                throw new System.ArgumentNullException("token");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{ServerWebAdaptor}/rest/services/{UtilityNetworkName}/UtilityNetworkServer/updateIsConnected?");
            urlBuilder_.Replace("{ServerWebAdaptor}", System.Uri.EscapeDataString(ConvertToString(serverWebAdaptor, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{UtilityNetworkName}", System.Uri.EscapeDataString(ConvertToString(utilityNetworkName, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append("f=").Append(System.Uri.EscapeDataString(ConvertToString(f, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("token=").Append(System.Uri.EscapeDataString(ConvertToString(token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try {
                using (var request_ = new System.Net.Http.HttpRequestMessage()) {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(UpdateIsConnectedResponse);
                            try {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateIsConnectedResponse>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_) {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204") {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(UpdateIsConnectedResponse);
                    }
                    finally {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>trace</summary>
        /// <param name="f">Optional parameter representing the output format of the response (default is JSON).</param>
        /// <param name="gdbVersion">The name of the geodatabase version.</param>
        /// <param name="sessionId">Optional parameter representing the token (guid) used to lock the version. If the calling client has previously started a service session (editing) and holds an exclusive lock on the specified version, the request will fail if the sessionId is not provided. If the specified version is currently locked by any other session, the request will fail if the sessionId is not provided or does not match the sessionId which holds the exclusive lock.</param>
        /// <param name="moment">Optional parameter representing the session moment (the default is the version current moment). This should only be specified by the client when they do not want to use the current moment.</param>
        /// <param name="traceType">The trace type.</param>
        /// <param name="traceLocations">***Curently a workaround until figure out how to gen**The locations for starting and stopping points, as well as barriers. Optional parameter for subnetwork trace type, required parameter for all other trace types.</param>
        /// <param name="traceConfiguration">The locations for starting and stopping points, as well as barriers. Optional parameter for subnetwork trace type, required parameter for all other trace types.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<TraceResultsSet> TraceAsync(string token, string f, string gdbVersion, string sessionId, string moment, TraceType traceType, string traceLocations, string traceConfiguration, string serverWebAdaptor, string utilityNetworkName)
        {
            return TraceAsync(token, f, gdbVersion, sessionId, moment, traceType, traceLocations, traceConfiguration, serverWebAdaptor, utilityNetworkName, System.Threading.CancellationToken.None);
        }

        /// <summary>trace</summary>
        /// <param name="f">Optional parameter representing the output format of the response (default is JSON).</param>
        /// <param name="gdbVersion">The name of the geodatabase version.</param>
        /// <param name="sessionId">Optional parameter representing the token (guid) used to lock the version. If the calling client has previously started a service session (editing) and holds an exclusive lock on the specified version, the request will fail if the sessionId is not provided. If the specified version is currently locked by any other session, the request will fail if the sessionId is not provided or does not match the sessionId which holds the exclusive lock.</param>
        /// <param name="moment">Optional parameter representing the session moment (the default is the version current moment). This should only be specified by the client when they do not want to use the current moment.</param>
        /// <param name="traceType">The trace type.</param>
        /// <param name="traceLocations">***Curently a workaround until figure out how to gen**The locations for starting and stopping points, as well as barriers. Optional parameter for subnetwork trace type, required parameter for all other trace types.</param>
        /// <param name="traceConfiguration">The locations for starting and stopping points, as well as barriers. Optional parameter for subnetwork trace type, required parameter for all other trace types.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<TraceResultsSet> TraceAsync(string token, string f, string gdbVersion, string sessionId, string moment, TraceType traceType, string traceLocations, string traceConfiguration, string serverWebAdaptor, string utilityNetworkName, System.Threading.CancellationToken cancellationToken)
        {
            if (serverWebAdaptor == null)
                throw new System.ArgumentNullException("serverWebAdaptor");

            if (utilityNetworkName == null)
                throw new System.ArgumentNullException("utilityNetworkName");

            if (token == null)
                throw new System.ArgumentNullException("token");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{ServerWebAdaptor}/rest/services/{UtilityNetworkName}/UtilityNetworkServer/trace?");
            urlBuilder_.Replace("{ServerWebAdaptor}", System.Uri.EscapeDataString(ConvertToString(serverWebAdaptor, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{UtilityNetworkName}", System.Uri.EscapeDataString(ConvertToString(utilityNetworkName, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Append("token=").Append(System.Uri.EscapeDataString(ConvertToString(token, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try {
                using (var request_ = new System.Net.Http.HttpRequestMessage()) {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (f == null)
                        throw new System.ArgumentNullException("f");
                    else
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(f, System.Globalization.CultureInfo.InvariantCulture)), "f");
                    if (gdbVersion != null)
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(gdbVersion, System.Globalization.CultureInfo.InvariantCulture)), "gdbVersion");
                    if (sessionId != null)
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(sessionId, System.Globalization.CultureInfo.InvariantCulture)), "sessionId");
                    if (moment != null)
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(moment, System.Globalization.CultureInfo.InvariantCulture)), "moment");
                    if (traceType == null)
                        throw new System.ArgumentNullException("traceType");
                    else
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(traceType, System.Globalization.CultureInfo.InvariantCulture)), "traceType");
                    if (traceLocations == null)
                        throw new System.ArgumentNullException("traceLocations");
                    else
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(traceLocations, System.Globalization.CultureInfo.InvariantCulture)), "traceLocations");
                    if (traceConfiguration == null)
                        throw new System.ArgumentNullException("traceConfiguration");
                    else
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(traceConfiguration, System.Globalization.CultureInfo.InvariantCulture)), "traceConfiguration");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(TraceResultsSet);
                            try {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<TraceResultsSet>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_) {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "404") {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("Tracing endpoint not found {base}/UtilityNetworkServer/trace", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204") {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(TraceResultsSet);
                    }
                    finally {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>generateToken</summary>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<TokenResponse> GenerateTokenAsync(string username, string password, string ip, string referer, double expiration, string f, string portalWebAdaptor)
        {
            return GenerateTokenAsync(username, password, ip, referer, expiration, f, portalWebAdaptor, System.Threading.CancellationToken.None);
        }

        /// <summary>generateToken</summary>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<TokenResponse> GenerateTokenAsync(string username, string password, string ip, string referer, double expiration, string f, string portalWebAdaptor, System.Threading.CancellationToken cancellationToken)
        {
            if (portalWebAdaptor == null)
                throw new System.ArgumentNullException("portalWebAdaptor");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/{PortalWebAdaptor}/sharing/rest/generateToken");
            urlBuilder_.Replace("{PortalWebAdaptor}", System.Uri.EscapeDataString(ConvertToString(portalWebAdaptor, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = new System.Net.Http.HttpClient();
            try {
                using (var request_ = new System.Net.Http.HttpRequestMessage()) {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (username == null)
                        throw new System.ArgumentNullException("username");
                    else
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(username, System.Globalization.CultureInfo.InvariantCulture)), "username");
                    if (password == null)
                        throw new System.ArgumentNullException("password");
                    else
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(password, System.Globalization.CultureInfo.InvariantCulture)), "password");
                    if (ip != null)
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(ip, System.Globalization.CultureInfo.InvariantCulture)), "ip");
                    if (referer != null)
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(referer, System.Globalization.CultureInfo.InvariantCulture)), "referer");
                    if (expiration == null)
                        throw new System.ArgumentNullException("expiration");
                    else
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(expiration, System.Globalization.CultureInfo.InvariantCulture)), "expiration");
                    if (f == null)
                        throw new System.ArgumentNullException("f");
                    else
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(f, System.Globalization.CultureInfo.InvariantCulture)), "f");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(TokenResponse);
                            try {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<TokenResponse>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_) {
                                throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204") {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(TokenResponse);
                    }
                    finally {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum) {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null) {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null) {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null) {
                            return attribute.Value;
                        }
                    }
                }
            }
            else if (value is byte[]) {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value != null && value.GetType().IsArray) {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            return System.Convert.ToString(value, cultureInfo);
        }
    }



    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.70.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TraceLocation : System.ComponentModel.INotifyPropertyChanged {
        private TraceLocationType? _traceLocationType;
        private string _globalId;
        private double? _percentAlong;

        [Newtonsoft.Json.JsonProperty("traceLocationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TraceLocationType? TraceLocationType
        {
            get { return _traceLocationType; }
            set
            {
                if (_traceLocationType != value) {
                    _traceLocationType = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("globalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GlobalId
        {
            get { return _globalId; }
            set
            {
                if (_globalId != value) {
                    _globalId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("percentAlong", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PercentAlong
        {
            get { return _percentAlong; }
            set
            {
                if (_percentAlong != value) {
                    _percentAlong = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static TraceLocation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TraceLocation>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.70.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ConditionBarrier : System.ComponentModel.INotifyPropertyChanged {
        private string _networkAttributeName;
        private string _operator;
        private double _value;
        private bool _combineUsingOr;
        private bool _isTypeSpecificValue;

        [Newtonsoft.Json.JsonProperty("networkAttributeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NetworkAttributeName
        {
            get { return _networkAttributeName; }
            set
            {
                if (_networkAttributeName != value) {
                    _networkAttributeName = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("operator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Operator
        {
            get { return _operator; }
            set
            {
                if (_operator != value) {
                    _operator = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>0 = unknown, 1 = open, 2 = closed</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        public double Value
        {
            get { return _value; }
            set
            {
                if (_value != value) {
                    _value = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("combineUsingOr", Required = Newtonsoft.Json.Required.Always)]
        public bool CombineUsingOr
        {
            get { return _combineUsingOr; }
            set
            {
                if (_combineUsingOr != value) {
                    _combineUsingOr = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("isTypeSpecificValue", Required = Newtonsoft.Json.Required.Always)]
        public bool IsTypeSpecificValue
        {
            get { return _isTypeSpecificValue; }
            set
            {
                if (_isTypeSpecificValue != value) {
                    _isTypeSpecificValue = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ConditionBarrier FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConditionBarrier>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    /// <summary>Token reesponse from Portal</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.70.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TokenResponse : System.ComponentModel.INotifyPropertyChanged {
        private string _token;
        private double? _expires;
        private bool? _ssl;
        private Error _error;

        /// <summary>The generated token.</summary>
        [Newtonsoft.Json.JsonProperty("token", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Token
        {
            get { return _token; }
            set
            {
                if (_token != value) {
                    _token = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The expiration time of the token in milliseconds since Jan. 1, 1970 (UTC).</summary>
        [Newtonsoft.Json.JsonProperty("expires", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Expires
        {
            get { return _expires; }
            set
            {
                if (_expires != value) {
                    _expires = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>True if the token must always pass over ssl.</summary>
        [Newtonsoft.Json.JsonProperty("ssl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Ssl
        {
            get { return _ssl; }
            set
            {
                if (_ssl != value) {
                    _ssl = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Error Error
        {
            get { return _error; }
            set
            {
                if (_error != value) {
                    _error = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static TokenResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TokenResponse>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    /// <summary>Array of objects; optional parameter.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.70.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class FunctionBarrier : System.ComponentModel.INotifyPropertyChanged {
        private FunctionBarrierFunctionType _functionType;
        private string _networkAttributeName;
        private FunctionBarrierOperator _operator;
        private string _value;
        private bool? _useLocalValues;

        /// <summary>Choose from a number of different calculation functions.</summary>
        [Newtonsoft.Json.JsonProperty("functionType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FunctionBarrierFunctionType FunctionType
        {
            get { return _functionType; }
            set
            {
                if (_functionType != value) {
                    _functionType = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Choose to filter by any network attribute defined in the system.</summary>
        [Newtonsoft.Json.JsonProperty("networkAttributeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NetworkAttributeName
        {
            get { return _networkAttributeName; }
            set
            {
                if (_networkAttributeName != value) {
                    _networkAttributeName = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Choose from a number of different operators</summary>
        [Newtonsoft.Json.JsonProperty("operator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FunctionBarrierOperator Operator
        {
            get { return _operator; }
            set
            {
                if (_operator != value) {
                    _operator = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Specific value of the input attribute type that, if discovered, will cause the termination.(string (numeric)</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value
        {
            get { return _value; }
            set
            {
                if (_value != value) {
                    _value = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Calculates values in each direction as opposed to an overall global value.</summary>
        [Newtonsoft.Json.JsonProperty("useLocalValues", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseLocalValues
        {
            get { return _useLocalValues; }
            set
            {
                if (_useLocalValues != value) {
                    _useLocalValues = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static FunctionBarrier FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FunctionBarrier>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.70.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Feature : System.ComponentModel.INotifyPropertyChanged {
        private string _networkSourceId;
        private string _globalId;
        private double? _objectId;
        private double? _terminalId;
        private System.Collections.ObjectModel.ObservableCollection<double> _networkAttributes;
        private double? _assetGroup;
        private double? _assetType;

        /// <summary>networkSourceId</summary>
        [Newtonsoft.Json.JsonProperty("networkSourceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NetworkSourceId
        {
            get { return _networkSourceId; }
            set
            {
                if (_networkSourceId != value) {
                    _networkSourceId = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>guid</summary>
        [Newtonsoft.Json.JsonProperty("globalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GlobalId
        {
            get { return _globalId; }
            set
            {
                if (_globalId != value) {
                    _globalId = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>objectId</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ObjectId
        {
            get { return _objectId; }
            set
            {
                if (_objectId != value) {
                    _objectId = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>terminalId</summary>
        [Newtonsoft.Json.JsonProperty("terminalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TerminalId
        {
            get { return _terminalId; }
            set
            {
                if (_terminalId != value) {
                    _terminalId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("networkAttributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<double> NetworkAttributes
        {
            get { return _networkAttributes; }
            set
            {
                if (_networkAttributes != value) {
                    _networkAttributes = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>assetGroup</summary>
        [Newtonsoft.Json.JsonProperty("assetGroup", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AssetGroup
        {
            get { return _assetGroup; }
            set
            {
                if (_assetGroup != value) {
                    _assetGroup = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>assetType</summary>
        [Newtonsoft.Json.JsonProperty("assetType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AssetType
        {
            get { return _assetType; }
            set
            {
                if (_assetType != value) {
                    _assetType = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Feature FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Feature>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.70.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class OutputFilter : System.ComponentModel.INotifyPropertyChanged {
        private double _sourceId;
        private double _assetGroup;
        private double _assetType;

        [Newtonsoft.Json.JsonProperty("sourceId", Required = Newtonsoft.Json.Required.Always)]
        public double SourceId
        {
            get { return _sourceId; }
            set
            {
                if (_sourceId != value) {
                    _sourceId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("assetGroup", Required = Newtonsoft.Json.Required.Always)]
        public double AssetGroup
        {
            get { return _assetGroup; }
            set
            {
                if (_assetGroup != value) {
                    _assetGroup = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("assetType", Required = Newtonsoft.Json.Required.Always)]
        public double AssetType
        {
            get { return _assetType; }
            set
            {
                if (_assetType != value) {
                    _assetType = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static OutputFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<OutputFilter>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.70.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class NetworkAttribute : System.ComponentModel.INotifyPropertyChanged {
        private double? _networkAttribute1;

        [Newtonsoft.Json.JsonProperty("networkAttribute", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? NetworkAttribute1
        {
            get { return _networkAttribute1; }
            set
            {
                if (_networkAttribute1 != value) {
                    _networkAttribute1 = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static NetworkAttribute FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NetworkAttribute>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.70.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Propagator : System.ComponentModel.INotifyPropertyChanged {
        private string _networkAttributeName;
        private PropagatorFunctionType _functionType;
        private PropagatorOperator _operator;
        private string _value;

        [Newtonsoft.Json.JsonProperty("networkAttributeName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NetworkAttributeName
        {
            get { return _networkAttributeName; }
            set
            {
                if (_networkAttributeName != value) {
                    _networkAttributeName = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("functionType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PropagatorFunctionType FunctionType
        {
            get { return _functionType; }
            set
            {
                if (_functionType != value) {
                    _functionType = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("operator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PropagatorOperator Operator
        {
            get { return _operator; }
            set
            {
                if (_operator != value) {
                    _operator = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>string (numeric)</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value
        {
            get { return _value; }
            set
            {
                if (_value != value) {
                    _value = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Propagator FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Propagator>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.70.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TraceConfiguration : System.ComponentModel.INotifyPropertyChanged {
        private bool? _includeContainers = false;
        private bool? _includeContent = false;
        private bool? _includeStructures = false;
        private bool? _includeBarriers = true;
        private bool? _validateConsistency = false;
        private string _domainNetworkName = "";
        private string _tierName = "";
        private string _targetTierName = "";
        private string _subnetworkName = "";
        private string _diagramTemplateName = "";
        private string _shortestPathNetworkAttributeName = "";
        private string _filterBitsetNetworkAttributeName = "";
        private TraceConfigurationTraversabilityScope? _traversabilityScope = MyNamespace.TraceConfigurationTraversabilityScope.JunctionsAndEdges;
        private System.Collections.ObjectModel.ObservableCollection<ConditionBarrier> _conditionBarriers = new System.Collections.ObjectModel.ObservableCollection<ConditionBarrier>();
        private System.Collections.ObjectModel.ObservableCollection<string> _categoryBarriers;
        private System.Collections.ObjectModel.ObservableCollection<FunctionBarrier> _functionBarriers = new System.Collections.ObjectModel.ObservableCollection<FunctionBarrier>();
        private string _arcadeExpressionBarrier = "";
        private System.Collections.ObjectModel.ObservableCollection<string> _filterBarriers = new System.Collections.ObjectModel.ObservableCollection<string>();
        private System.Collections.ObjectModel.ObservableCollection<string> _filterFunctionBarriers = new System.Collections.ObjectModel.ObservableCollection<string>();
        private string _filterScope = "junctionsAndEdges";
        private object _functions = new object();
        private NearestNeighborParam _nearestNeighbor = new NearestNeighborParam();
        private System.Collections.ObjectModel.ObservableCollection<TraceOutputCondition> _outputFilters = new System.Collections.ObjectModel.ObservableCollection<TraceOutputCondition>();
        private System.Collections.ObjectModel.ObservableCollection<OutputFilter> _outputConditions = new System.Collections.ObjectModel.ObservableCollection<OutputFilter>();
        private System.Collections.ObjectModel.ObservableCollection<Propagator> _propagators = new System.Collections.ObjectModel.ObservableCollection<Propagator>();

        /// <summary>Optional parameter representing whether or not to include containers in the trace result (default is false).</summary>
        [Newtonsoft.Json.JsonProperty("includeContainers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IncludeContainers
        {
            get { return _includeContainers; }
            set
            {
                if (_includeContainers != value) {
                    _includeContainers = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Optional parameter representing whether or not to include content in the trace result (default is false).</summary>
        [Newtonsoft.Json.JsonProperty("includeContent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IncludeContent
        {
            get { return _includeContent; }
            set
            {
                if (_includeContent != value) {
                    _includeContent = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Optional parameter representing whether or not to include structures in the trace result (default is false).</summary>
        [Newtonsoft.Json.JsonProperty("includeStructures", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IncludeStructures
        {
            get { return _includeStructures; }
            set
            {
                if (_includeStructures != value) {
                    _includeStructures = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Optional parameter representing whether or not to include barrier features that stop a trace in the trace result (default is true).</summary>
        [Newtonsoft.Json.JsonProperty("includeBarriers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IncludeBarriers
        {
            get { return _includeBarriers; }
            set
            {
                if (_includeBarriers != value) {
                    _includeBarriers = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Optional parameter representing whether or not to validate the consistency of the trace results (default is false).</summary>
        [Newtonsoft.Json.JsonProperty("validateConsistency", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ValidateConsistency
        {
            get { return _validateConsistency; }
            set
            {
                if (_validateConsistency != value) {
                    _validateConsistency = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Optional parameter that specifies the name of the domain network where the trace is starting.</summary>
        [Newtonsoft.Json.JsonProperty("domainNetworkName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DomainNetworkName
        {
            get { return _domainNetworkName; }
            set
            {
                if (_domainNetworkName != value) {
                    _domainNetworkName = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Optional parameter that specifies the name of the tier where the trace is starting.</summary>
        [Newtonsoft.Json.JsonProperty("tierName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TierName
        {
            get { return _tierName; }
            set
            {
                if (_tierName != value) {
                    _tierName = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Optional parameter representing the name of the tier where upstream or downstream trace ends.</summary>
        [Newtonsoft.Json.JsonProperty("targetTierName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetTierName
        {
            get { return _targetTierName; }
            set
            {
                if (_targetTierName != value) {
                    _targetTierName = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Optional parameter representing the name of the subnetwork that will be traced - the starting points of the trace will be the controllers of this subnetwork .</summary>
        [Newtonsoft.Json.JsonProperty("subnetworkName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubnetworkName
        {
            get { return _subnetworkName; }
            set
            {
                if (_subnetworkName != value) {
                    _subnetworkName = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Optional parameter representing the name of the diagram template.</summary>
        [Newtonsoft.Json.JsonProperty("diagramTemplateName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DiagramTemplateName
        {
            get { return _diagramTemplateName; }
            set
            {
                if (_diagramTemplateName != value) {
                    _diagramTemplateName = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Required parameter for shortest path trace ; optional otherwise. It represents the network attribute name used for determining cost when calulating the shortest path.</summary>
        [Newtonsoft.Json.JsonProperty("shortestPathNetworkAttributeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShortestPathNetworkAttributeName
        {
            get { return _shortestPathNetworkAttributeName; }
            set
            {
                if (_shortestPathNetworkAttributeName != value) {
                    _shortestPathNetworkAttributeName = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Optional parameter. Used during loops trace to only return loops with the same bit set all around the loop. Used during upstream/downstream traces to ensure that trace results include any bit that is set in the starting points for the network attribute.</summary>
        [Newtonsoft.Json.JsonProperty("filterBitsetNetworkAttributeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FilterBitsetNetworkAttributeName
        {
            get { return _filterBitsetNetworkAttributeName; }
            set
            {
                if (_filterBitsetNetworkAttributeName != value) {
                    _filterBitsetNetworkAttributeName = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Optional parameters representing which network element types the condition, category, or function barriers apply to (default is junctionsAndEdges).</summary>
        [Newtonsoft.Json.JsonProperty("traversabilityScope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TraceConfigurationTraversabilityScope? TraversabilityScope
        {
            get { return _traversabilityScope; }
            set
            {
                if (_traversabilityScope != value) {
                    _traversabilityScope = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Optional parameter containing an array of objects (representing network attribute conditions) that serve as barriers - default is null. If isTypeSpecificValue is true, the network attribute is being compared with a specific value ; otherwise the network attribute is being compared with another network attribute.</summary>
        [Newtonsoft.Json.JsonProperty("conditionBarriers", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<ConditionBarrier> ConditionBarriers
        {
            get { return _conditionBarriers; }
            set
            {
                if (_conditionBarriers != value) {
                    _conditionBarriers = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The categories that serve as barriers (default is none) : optional parameter.</summary>
        [Newtonsoft.Json.JsonProperty("categoryBarriers", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> CategoryBarriers
        {
            get { return _categoryBarriers; }
            set
            {
                if (_categoryBarriers != value) {
                    _categoryBarriers = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>optional parameter.</summary>
        [Newtonsoft.Json.JsonProperty("functionBarriers", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<FunctionBarrier> FunctionBarriers
        {
            get { return _functionBarriers; }
            set
            {
                if (_functionBarriers != value) {
                    _functionBarriers = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("arcadeExpressionBarrier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ArcadeExpressionBarrier
        {
            get { return _arcadeExpressionBarrier; }
            set
            {
                if (_arcadeExpressionBarrier != value) {
                    _arcadeExpressionBarrier = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>A second pass is done over the trace results and all results after these categories are encountered are filtered (default is none) : optional parameter.</summary>
        [Newtonsoft.Json.JsonProperty("filterBarriers", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<string> FilterBarriers
        {
            get { return _filterBarriers; }
            set
            {
                if (_filterBarriers != value) {
                    _filterBarriers = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("filterFunctionBarriers", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<string> FilterFunctionBarriers
        {
            get { return _filterFunctionBarriers; }
            set
            {
                if (_filterFunctionBarriers != value) {
                    _filterFunctionBarriers = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("filterScope", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FilterScope
        {
            get { return _filterScope; }
            set
            {
                if (_filterScope != value) {
                    _filterScope = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Optional parameter ; an array of objects representing functions. Each function may have an optional array of network attribute conditions.</summary>
        [Newtonsoft.Json.JsonProperty("functions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Functions
        {
            get { return _functions; }
            set
            {
                if (_functions != value) {
                    _functions = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("nearestNeighbor", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public NearestNeighborParam NearestNeighbor
        {
            get { return _nearestNeighbor; }
            set
            {
                if (_nearestNeighbor != value) {
                    _nearestNeighbor = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("outputFilters", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<TraceOutputCondition> OutputFilters
        {
            get { return _outputFilters; }
            set
            {
                if (_outputFilters != value) {
                    _outputFilters = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>The categories associated with the output filter (default is none) ; optional parameter.</summary>
        [Newtonsoft.Json.JsonProperty("outputConditions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<OutputFilter> OutputConditions
        {
            get { return _outputConditions; }
            set
            {
                if (_outputConditions != value) {
                    _outputConditions = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("propagators", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<Propagator> Propagators
        {
            get { return _propagators; }
            set
            {
                if (_propagators != value) {
                    _propagators = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static TraceConfiguration FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TraceConfiguration>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.70.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TraceOutputCondition : System.ComponentModel.INotifyPropertyChanged {
        private string _name;
        private TraceOutputConditionType _type;
        private string _operator;
        private double? _value;
        private bool? _combineUsingOr;
        private bool _isSpecificValue;

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value) {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TraceOutputConditionType Type
        {
            get { return _type; }
            set
            {
                if (_type != value) {
                    _type = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("operator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Operator
        {
            get { return _operator; }
            set
            {
                if (_operator != value) {
                    _operator = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Value
        {
            get { return _value; }
            set
            {
                if (_value != value) {
                    _value = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("combineUsingOr", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CombineUsingOr
        {
            get { return _combineUsingOr; }
            set
            {
                if (_combineUsingOr != value) {
                    _combineUsingOr = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("isSpecificValue", Required = Newtonsoft.Json.Required.Always)]
        public bool IsSpecificValue
        {
            get { return _isSpecificValue; }
            set
            {
                if (_isSpecificValue != value) {
                    _isSpecificValue = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static TraceOutputCondition FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TraceOutputCondition>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    /// <summary>Model for TraceResults</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.70.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TraceResultsSet : System.ComponentModel.INotifyPropertyChanged {
        private TraceResults _traceResults;
        private bool? _success;
        private Error2 _error;

        [Newtonsoft.Json.JsonProperty("traceResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TraceResults TraceResults
        {
            get { return _traceResults; }
            set
            {
                if (_traceResults != value) {
                    _traceResults = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Success
        {
            get { return _success; }
            set
            {
                if (_success != value) {
                    _success = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Error2 Error
        {
            get { return _error; }
            set
            {
                if (_error != value) {
                    _error = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static TraceResultsSet FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TraceResultsSet>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.70.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TokenRequest : System.ComponentModel.INotifyPropertyChanged {
        private string _username;
        private string _password;
        private string _ip;
        private string _referer;
        private double _expiration;
        private string _f = "json";

        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Username
        {
            get { return _username; }
            set
            {
                if (_username != value) {
                    _username = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Password
        {
            get { return _password; }
            set
            {
                if (_password != value) {
                    _password = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("ip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ip
        {
            get { return _ip; }
            set
            {
                if (_ip != value) {
                    _ip = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("referer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Referer
        {
            get { return _referer; }
            set
            {
                if (_referer != value) {
                    _referer = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("expiration", Required = Newtonsoft.Json.Required.Always)]
        public double Expiration
        {
            get { return _expiration; }
            set
            {
                if (_expiration != value) {
                    _expiration = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("f", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string F
        {
            get { return _f; }
            set
            {
                if (_f != value) {
                    _f = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static TokenRequest FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TokenRequest>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.70.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class NearestNeighborParam : System.ComponentModel.INotifyPropertyChanged {
        private int? _count = -1;
        private string _costNetworkAttributeName = "";
        private System.Collections.ObjectModel.ObservableCollection<string> _nearestCategories = new System.Collections.ObjectModel.ObservableCollection<string>();
        private System.Collections.ObjectModel.ObservableCollection<string> _nearestAssets = new System.Collections.ObjectModel.ObservableCollection<string>();

        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Count
        {
            get { return _count; }
            set
            {
                if (_count != value) {
                    _count = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("costNetworkAttributeName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CostNetworkAttributeName
        {
            get { return _costNetworkAttributeName; }
            set
            {
                if (_costNetworkAttributeName != value) {
                    _costNetworkAttributeName = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("nearestCategories", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<string> NearestCategories
        {
            get { return _nearestCategories; }
            set
            {
                if (_nearestCategories != value) {
                    _nearestCategories = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("nearestAssets", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<string> NearestAssets
        {
            get { return _nearestAssets; }
            set
            {
                if (_nearestAssets != value) {
                    _nearestAssets = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static NearestNeighborParam FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<NearestNeighborParam>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.70.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class UpdateIsConnectedResponse : System.ComponentModel.INotifyPropertyChanged {
        private double? _moment;
        private string _success;
        private Error3 _error;

        [Newtonsoft.Json.JsonProperty("moment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Moment
        {
            get { return _moment; }
            set
            {
                if (_moment != value) {
                    _moment = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("success", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Success
        {
            get { return _success; }
            set
            {
                if (_success != value) {
                    _success = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Error3 Error
        {
            get { return _error; }
            set
            {
                if (_error != value) {
                    _error = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static UpdateIsConnectedResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateIsConnectedResponse>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    /// <summary>The trace type.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.70.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum TraceType {
        [System.Runtime.Serialization.EnumMember(Value = "upstream")]
        Upstream = 0,

        [System.Runtime.Serialization.EnumMember(Value = "downstream")]
        Downstream = 1,

        [System.Runtime.Serialization.EnumMember(Value = "connected")]
        Connected = 2,

        [System.Runtime.Serialization.EnumMember(Value = "subnetwork")]
        Subnetwork = 3,

        [System.Runtime.Serialization.EnumMember(Value = "unknown")]
        Unknown = 4,

        [System.Runtime.Serialization.EnumMember(Value = "loops")]
        Loops = 5,

        [System.Runtime.Serialization.EnumMember(Value = "shortestpath")]
        Shortestpath = 6,

        [System.Runtime.Serialization.EnumMember(Value = "subnetworkcontroller")]
        Subnetworkcontroller = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.70.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum TraceLocationType {
        [System.Runtime.Serialization.EnumMember(Value = "startingPoint")]
        StartingPoint = 0,

        [System.Runtime.Serialization.EnumMember(Value = "stoppingPoint")]
        StoppingPoint = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.70.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Error : System.ComponentModel.INotifyPropertyChanged {
        private double? _code;
        private string _message;
        private System.Collections.ObjectModel.ObservableCollection<string> _details;

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Code
        {
            get { return _code; }
            set
            {
                if (_code != value) {
                    _code = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message
        {
            get { return _message; }
            set
            {
                if (_message != value) {
                    _message = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Details
        {
            get { return _details; }
            set
            {
                if (_details != value) {
                    _details = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Error FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.70.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum FunctionBarrierFunctionType {
        [System.Runtime.Serialization.EnumMember(Value = "add")]
        Add = 0,

        [System.Runtime.Serialization.EnumMember(Value = "subtract")]
        Subtract = 1,

        [System.Runtime.Serialization.EnumMember(Value = "average")]
        Average = 2,

        [System.Runtime.Serialization.EnumMember(Value = "count")]
        Count = 3,

        [System.Runtime.Serialization.EnumMember(Value = "min")]
        Min = 4,

        [System.Runtime.Serialization.EnumMember(Value = "max")]
        Max = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.70.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum FunctionBarrierOperator {
        [System.Runtime.Serialization.EnumMember(Value = "equal")]
        Equal = 0,

        [System.Runtime.Serialization.EnumMember(Value = "notEqual")]
        NotEqual = 1,

        [System.Runtime.Serialization.EnumMember(Value = "greaterThan")]
        GreaterThan = 2,

        [System.Runtime.Serialization.EnumMember(Value = "lessThan")]
        LessThan = 3,

        [System.Runtime.Serialization.EnumMember(Value = "lessThanEqual")]
        LessThanEqual = 4,

        [System.Runtime.Serialization.EnumMember(Value = "includesTheValues")]
        IncludesTheValues = 5,

        [System.Runtime.Serialization.EnumMember(Value = "doesNotIncludeTheValues")]
        DoesNotIncludeTheValues = 6,

        [System.Runtime.Serialization.EnumMember(Value = "includesAny")]
        IncludesAny = 7,

        [System.Runtime.Serialization.EnumMember(Value = "doesNotIncludeAny")]
        DoesNotIncludeAny = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.70.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PropagatorFunctionType {
        [System.Runtime.Serialization.EnumMember(Value = "bitwiseAnd")]
        BitwiseAnd = 0,

        [System.Runtime.Serialization.EnumMember(Value = "min")]
        Min = 1,

        [System.Runtime.Serialization.EnumMember(Value = "max")]
        Max = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.70.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum PropagatorOperator {
        [System.Runtime.Serialization.EnumMember(Value = "equal")]
        Equal = 0,

        [System.Runtime.Serialization.EnumMember(Value = "notEqual")]
        NotEqual = 1,

        [System.Runtime.Serialization.EnumMember(Value = "bitwiseAnd")]
        BitwiseAnd = 2,

        [System.Runtime.Serialization.EnumMember(Value = "greater")]
        Greater = 3,

        [System.Runtime.Serialization.EnumMember(Value = "greaterEqual")]
        GreaterEqual = 4,

        [System.Runtime.Serialization.EnumMember(Value = "less")]
        Less = 5,

        [System.Runtime.Serialization.EnumMember(Value = "lessEqual")]
        LessEqual = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.70.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum TraceConfigurationTraversabilityScope {
        [System.Runtime.Serialization.EnumMember(Value = "junctions")]
        Junctions = 0,

        [System.Runtime.Serialization.EnumMember(Value = "edges")]
        Edges = 1,

        [System.Runtime.Serialization.EnumMember(Value = "junctionsAndEdges")]
        JunctionsAndEdges = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.70.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum TraceOutputConditionType {
        [System.Runtime.Serialization.EnumMember(Value = "networkAttribute")]
        NetworkAttribute = 0,

        [System.Runtime.Serialization.EnumMember(Value = "category")]
        Category = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.70.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TraceResults : System.ComponentModel.INotifyPropertyChanged {
        private System.Collections.ObjectModel.ObservableCollection<Anonymous> _elements;
        private string _diagramName;
        private System.Collections.ObjectModel.ObservableCollection<string> _globalFunctionResults;
        private bool? _kFeaturesForKNNFound;
        private bool? _startingPointsIgnored;
        private System.Collections.ObjectModel.ObservableCollection<string> _warnings;

        [Newtonsoft.Json.JsonProperty("elements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous> Elements
        {
            get { return _elements; }
            set
            {
                if (_elements != value) {
                    _elements = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("diagramName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DiagramName
        {
            get { return _diagramName; }
            set
            {
                if (_diagramName != value) {
                    _diagramName = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("globalFunctionResults", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> GlobalFunctionResults
        {
            get { return _globalFunctionResults; }
            set
            {
                if (_globalFunctionResults != value) {
                    _globalFunctionResults = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("kFeaturesForKNNFound", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? KFeaturesForKNNFound
        {
            get { return _kFeaturesForKNNFound; }
            set
            {
                if (_kFeaturesForKNNFound != value) {
                    _kFeaturesForKNNFound = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("startingPointsIgnored", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? StartingPointsIgnored
        {
            get { return _startingPointsIgnored; }
            set
            {
                if (_startingPointsIgnored != value) {
                    _startingPointsIgnored = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Warnings
        {
            get { return _warnings; }
            set
            {
                if (_warnings != value) {
                    _warnings = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static TraceResults FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TraceResults>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.70.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Error2 : System.ComponentModel.INotifyPropertyChanged {
        private double? _code;
        private string _message;
        private System.Collections.ObjectModel.ObservableCollection<string> _details;

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Code
        {
            get { return _code; }
            set
            {
                if (_code != value) {
                    _code = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message
        {
            get { return _message; }
            set
            {
                if (_message != value) {
                    _message = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Details
        {
            get { return _details; }
            set
            {
                if (_details != value) {
                    _details = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Error2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Error2>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.70.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Error3 : System.ComponentModel.INotifyPropertyChanged {
        private double? _code;
        private string _message;
        private System.Collections.ObjectModel.ObservableCollection<string> _details;

        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Code
        {
            get { return _code; }
            set
            {
                if (_code != value) {
                    _code = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message
        {
            get { return _message; }
            set
            {
                if (_message != value) {
                    _message = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> Details
        {
            get { return _details; }
            set
            {
                if (_details != value) {
                    _details = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Error3 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Error3>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.70.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Anonymous : System.ComponentModel.INotifyPropertyChanged {
        private double? _networkSourceId;
        private string _globalId;
        private double? _objectId;
        private double? _terminalId;
        private double? _assetGroupCode;
        private double? _assetTypeCode;

        [Newtonsoft.Json.JsonProperty("networkSourceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? NetworkSourceId
        {
            get { return _networkSourceId; }
            set
            {
                if (_networkSourceId != value) {
                    _networkSourceId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("globalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GlobalId
        {
            get { return _globalId; }
            set
            {
                if (_globalId != value) {
                    _globalId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ObjectId
        {
            get { return _objectId; }
            set
            {
                if (_objectId != value) {
                    _objectId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("terminalId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TerminalId
        {
            get { return _terminalId; }
            set
            {
                if (_terminalId != value) {
                    _terminalId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("assetGroupCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AssetGroupCode
        {
            get { return _assetGroupCode; }
            set
            {
                if (_assetGroupCode != value) {
                    _assetGroupCode = value;
                    RaisePropertyChanged();
                }
            }
        }

        [Newtonsoft.Json.JsonProperty("assetTypeCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AssetTypeCode
        {
            get { return _assetTypeCode; }
            set
            {
                if (_assetTypeCode != value) {
                    _assetTypeCode = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Anonymous FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous>(data);
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.18.7.0 (NJsonSchema v9.10.70.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class SwaggerException : System.Exception {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message, innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.18.7.0 (NJsonSchema v9.10.70.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class SwaggerException<TResult> : SwaggerException {
        public TResult Result { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}