# coding: utf-8

"""
    Swagger for Utility Network

    Open API Specification (OAS/Swagger)  * **trace**, **updateIsConnected** from the [ArcGIS Utility Network](https://developers.arcgis.com/rest/services-reference/utility-network-service.htm) * **generateToken** from the [ArcGIS REST API](https://developers.arcgis.com/rest/)  Tested on ArcGIS  Enterprise 10.8.1 using OpenAPI Specification (OAC) written in [SwaggerEditor](https://github.com/swagger-api/swagger-editor)   and [SwaggerHub](https://app.swaggerhub.com/) for C# and Typescript-Angular code generation.    # noqa: E501

    OpenAPI spec version: 3.0
    Contact: kim.sundeen@sspinnovations.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TraceResultsSetTraceResults(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'elements': 'list[TraceResultsSetTraceResultsElements]',
        'diagram_name': 'str',
        'global_function_results': 'list[str]',
        'k_features_for_knn_found': 'bool',
        'starting_points_ignored': 'bool',
        'warnings': 'list[str]'
    }

    attribute_map = {
        'elements': 'elements',
        'diagram_name': 'diagramName',
        'global_function_results': 'globalFunctionResults',
        'k_features_for_knn_found': 'kFeaturesForKNNFound',
        'starting_points_ignored': 'startingPointsIgnored',
        'warnings': 'warnings'
    }

    def __init__(self, elements=None, diagram_name=None, global_function_results=None, k_features_for_knn_found=None, starting_points_ignored=None, warnings=None):  # noqa: E501
        """TraceResultsSetTraceResults - a model defined in Swagger"""  # noqa: E501
        self._elements = None
        self._diagram_name = None
        self._global_function_results = None
        self._k_features_for_knn_found = None
        self._starting_points_ignored = None
        self._warnings = None
        self.discriminator = None
        if elements is not None:
            self.elements = elements
        if diagram_name is not None:
            self.diagram_name = diagram_name
        if global_function_results is not None:
            self.global_function_results = global_function_results
        if k_features_for_knn_found is not None:
            self.k_features_for_knn_found = k_features_for_knn_found
        if starting_points_ignored is not None:
            self.starting_points_ignored = starting_points_ignored
        if warnings is not None:
            self.warnings = warnings

    @property
    def elements(self):
        """Gets the elements of this TraceResultsSetTraceResults.  # noqa: E501


        :return: The elements of this TraceResultsSetTraceResults.  # noqa: E501
        :rtype: list[TraceResultsSetTraceResultsElements]
        """
        return self._elements

    @elements.setter
    def elements(self, elements):
        """Sets the elements of this TraceResultsSetTraceResults.


        :param elements: The elements of this TraceResultsSetTraceResults.  # noqa: E501
        :type: list[TraceResultsSetTraceResultsElements]
        """

        self._elements = elements

    @property
    def diagram_name(self):
        """Gets the diagram_name of this TraceResultsSetTraceResults.  # noqa: E501


        :return: The diagram_name of this TraceResultsSetTraceResults.  # noqa: E501
        :rtype: str
        """
        return self._diagram_name

    @diagram_name.setter
    def diagram_name(self, diagram_name):
        """Sets the diagram_name of this TraceResultsSetTraceResults.


        :param diagram_name: The diagram_name of this TraceResultsSetTraceResults.  # noqa: E501
        :type: str
        """

        self._diagram_name = diagram_name

    @property
    def global_function_results(self):
        """Gets the global_function_results of this TraceResultsSetTraceResults.  # noqa: E501


        :return: The global_function_results of this TraceResultsSetTraceResults.  # noqa: E501
        :rtype: list[str]
        """
        return self._global_function_results

    @global_function_results.setter
    def global_function_results(self, global_function_results):
        """Sets the global_function_results of this TraceResultsSetTraceResults.


        :param global_function_results: The global_function_results of this TraceResultsSetTraceResults.  # noqa: E501
        :type: list[str]
        """

        self._global_function_results = global_function_results

    @property
    def k_features_for_knn_found(self):
        """Gets the k_features_for_knn_found of this TraceResultsSetTraceResults.  # noqa: E501


        :return: The k_features_for_knn_found of this TraceResultsSetTraceResults.  # noqa: E501
        :rtype: bool
        """
        return self._k_features_for_knn_found

    @k_features_for_knn_found.setter
    def k_features_for_knn_found(self, k_features_for_knn_found):
        """Sets the k_features_for_knn_found of this TraceResultsSetTraceResults.


        :param k_features_for_knn_found: The k_features_for_knn_found of this TraceResultsSetTraceResults.  # noqa: E501
        :type: bool
        """

        self._k_features_for_knn_found = k_features_for_knn_found

    @property
    def starting_points_ignored(self):
        """Gets the starting_points_ignored of this TraceResultsSetTraceResults.  # noqa: E501


        :return: The starting_points_ignored of this TraceResultsSetTraceResults.  # noqa: E501
        :rtype: bool
        """
        return self._starting_points_ignored

    @starting_points_ignored.setter
    def starting_points_ignored(self, starting_points_ignored):
        """Sets the starting_points_ignored of this TraceResultsSetTraceResults.


        :param starting_points_ignored: The starting_points_ignored of this TraceResultsSetTraceResults.  # noqa: E501
        :type: bool
        """

        self._starting_points_ignored = starting_points_ignored

    @property
    def warnings(self):
        """Gets the warnings of this TraceResultsSetTraceResults.  # noqa: E501


        :return: The warnings of this TraceResultsSetTraceResults.  # noqa: E501
        :rtype: list[str]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this TraceResultsSetTraceResults.


        :param warnings: The warnings of this TraceResultsSetTraceResults.  # noqa: E501
        :type: list[str]
        """

        self._warnings = warnings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TraceResultsSetTraceResults, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TraceResultsSetTraceResults):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
