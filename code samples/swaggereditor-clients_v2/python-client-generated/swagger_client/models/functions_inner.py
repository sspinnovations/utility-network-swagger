# coding: utf-8

"""
    Swagger for Utility Network

    Open API Specification (OAS/Swagger)  * **trace**, **updateIsConnected** from the [ArcGIS Utility Network](https://developers.arcgis.com/rest/services-reference/utility-network-service.htm) * **generateToken** from the [ArcGIS REST API](https://developers.arcgis.com/rest/)  Tested on ArcGIS  Enterprise 10.8.1 using OpenAPI Specification (OAC) written in [SwaggerEditor](https://github.com/swagger-api/swagger-editor)   and [SwaggerHub](https://app.swaggerhub.com/) for C# and Typescript-Angular code generation.    # noqa: E501

    OpenAPI spec version: 3.0
    Contact: kim.sundeen@sspinnovations.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FunctionsInner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'function_type': 'str',
        'network_attribute_name': 'str',
        'network_attribute_conditions': 'list[object]'
    }

    attribute_map = {
        'function_type': 'functionType',
        'network_attribute_name': 'networkAttributeName',
        'network_attribute_conditions': 'networkAttributeConditions'
    }

    def __init__(self, function_type=None, network_attribute_name=None, network_attribute_conditions=None):  # noqa: E501
        """FunctionsInner - a model defined in Swagger"""  # noqa: E501
        self._function_type = None
        self._network_attribute_name = None
        self._network_attribute_conditions = None
        self.discriminator = None
        self.function_type = function_type
        self.network_attribute_name = network_attribute_name
        if network_attribute_conditions is not None:
            self.network_attribute_conditions = network_attribute_conditions

    @property
    def function_type(self):
        """Gets the function_type of this FunctionsInner.  # noqa: E501


        :return: The function_type of this FunctionsInner.  # noqa: E501
        :rtype: str
        """
        return self._function_type

    @function_type.setter
    def function_type(self, function_type):
        """Sets the function_type of this FunctionsInner.


        :param function_type: The function_type of this FunctionsInner.  # noqa: E501
        :type: str
        """
        if function_type is None:
            raise ValueError("Invalid value for `function_type`, must not be `None`")  # noqa: E501
        allowed_values = ["add", "subtract", "average", "count", "min", "max"]  # noqa: E501
        if function_type not in allowed_values:
            raise ValueError(
                "Invalid value for `function_type` ({0}), must be one of {1}"  # noqa: E501
                .format(function_type, allowed_values)
            )

        self._function_type = function_type

    @property
    def network_attribute_name(self):
        """Gets the network_attribute_name of this FunctionsInner.  # noqa: E501


        :return: The network_attribute_name of this FunctionsInner.  # noqa: E501
        :rtype: str
        """
        return self._network_attribute_name

    @network_attribute_name.setter
    def network_attribute_name(self, network_attribute_name):
        """Sets the network_attribute_name of this FunctionsInner.


        :param network_attribute_name: The network_attribute_name of this FunctionsInner.  # noqa: E501
        :type: str
        """
        if network_attribute_name is None:
            raise ValueError("Invalid value for `network_attribute_name`, must not be `None`")  # noqa: E501

        self._network_attribute_name = network_attribute_name

    @property
    def network_attribute_conditions(self):
        """Gets the network_attribute_conditions of this FunctionsInner.  # noqa: E501


        :return: The network_attribute_conditions of this FunctionsInner.  # noqa: E501
        :rtype: list[object]
        """
        return self._network_attribute_conditions

    @network_attribute_conditions.setter
    def network_attribute_conditions(self, network_attribute_conditions):
        """Sets the network_attribute_conditions of this FunctionsInner.


        :param network_attribute_conditions: The network_attribute_conditions of this FunctionsInner.  # noqa: E501
        :type: list[object]
        """

        self._network_attribute_conditions = network_attribute_conditions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FunctionsInner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FunctionsInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
