# coding: utf-8

"""
    Swagger for Utility Network

    Open API Specification (OAS/Swagger)  * **trace**, **updateIsConnected** from the [ArcGIS Utility Network](https://developers.arcgis.com/rest/services-reference/utility-network-service.htm) * **generateToken** from the [ArcGIS REST API](https://developers.arcgis.com/rest/)  Tested on ArcGIS  Enterprise 10.8.1 using OpenAPI Specification (OAC) written in [SwaggerEditor](https://github.com/swagger-api/swagger-editor)   and [SwaggerHub](https://app.swaggerhub.com/) for C# and Typescript-Angular code generation.    # noqa: E501

    OpenAPI spec version: 3.0
    Contact: kim.sundeen@sspinnovations.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TraceOutputCondition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'type': 'str',
        'operator': 'str',
        'value': 'float',
        'combine_using_or': 'bool',
        'is_specific_value': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'type': 'type',
        'operator': 'operator',
        'value': 'value',
        'combine_using_or': 'combineUsingOr',
        'is_specific_value': 'isSpecificValue'
    }

    def __init__(self, name=None, type=None, operator=None, value=None, combine_using_or=None, is_specific_value=None):  # noqa: E501
        """TraceOutputCondition - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._type = None
        self._operator = None
        self._value = None
        self._combine_using_or = None
        self._is_specific_value = None
        self.discriminator = None
        self.name = name
        self.type = type
        self.operator = operator
        if value is not None:
            self.value = value
        if combine_using_or is not None:
            self.combine_using_or = combine_using_or
        self.is_specific_value = is_specific_value

    @property
    def name(self):
        """Gets the name of this TraceOutputCondition.  # noqa: E501


        :return: The name of this TraceOutputCondition.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TraceOutputCondition.


        :param name: The name of this TraceOutputCondition.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def type(self):
        """Gets the type of this TraceOutputCondition.  # noqa: E501


        :return: The type of this TraceOutputCondition.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TraceOutputCondition.


        :param type: The type of this TraceOutputCondition.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["networkAttribute", "category"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def operator(self):
        """Gets the operator of this TraceOutputCondition.  # noqa: E501


        :return: The operator of this TraceOutputCondition.  # noqa: E501
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this TraceOutputCondition.


        :param operator: The operator of this TraceOutputCondition.  # noqa: E501
        :type: str
        """
        if operator is None:
            raise ValueError("Invalid value for `operator`, must not be `None`")  # noqa: E501

        self._operator = operator

    @property
    def value(self):
        """Gets the value of this TraceOutputCondition.  # noqa: E501


        :return: The value of this TraceOutputCondition.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this TraceOutputCondition.


        :param value: The value of this TraceOutputCondition.  # noqa: E501
        :type: float
        """

        self._value = value

    @property
    def combine_using_or(self):
        """Gets the combine_using_or of this TraceOutputCondition.  # noqa: E501


        :return: The combine_using_or of this TraceOutputCondition.  # noqa: E501
        :rtype: bool
        """
        return self._combine_using_or

    @combine_using_or.setter
    def combine_using_or(self, combine_using_or):
        """Sets the combine_using_or of this TraceOutputCondition.


        :param combine_using_or: The combine_using_or of this TraceOutputCondition.  # noqa: E501
        :type: bool
        """

        self._combine_using_or = combine_using_or

    @property
    def is_specific_value(self):
        """Gets the is_specific_value of this TraceOutputCondition.  # noqa: E501


        :return: The is_specific_value of this TraceOutputCondition.  # noqa: E501
        :rtype: bool
        """
        return self._is_specific_value

    @is_specific_value.setter
    def is_specific_value(self, is_specific_value):
        """Sets the is_specific_value of this TraceOutputCondition.


        :param is_specific_value: The is_specific_value of this TraceOutputCondition.  # noqa: E501
        :type: bool
        """
        if is_specific_value is None:
            raise ValueError("Invalid value for `is_specific_value`, must not be `None`")  # noqa: E501

        self._is_specific_value = is_specific_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TraceOutputCondition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TraceOutputCondition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
