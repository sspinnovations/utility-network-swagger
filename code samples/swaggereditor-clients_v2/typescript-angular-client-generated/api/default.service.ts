/**
 * Swagger for Utility Network
 * Open API Specification (OAS/Swagger)  * **trace**, **updateIsConnected** from the [ArcGIS Utility Network](https://developers.arcgis.com/rest/services-reference/utility-network-service.htm) * **generateToken** from the [ArcGIS REST API](https://developers.arcgis.com/rest/)  Tested on ArcGIS  Enterprise 10.8.1 using OpenAPI Specification (OAC) written in [SwaggerEditor](https://github.com/swagger-api/swagger-editor)   and [SwaggerHub](https://app.swaggerhub.com/) for C# and Typescript-Angular code generation.  
 *
 * OpenAPI spec version: 3.0
 * Contact: kim.sundeen@sspinnovations.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Body } from '../model/body';
import { UpdateIsConnectedResponse } from '../model/updateIsConnectedResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class DefaultService {

    protected basePath = 'http://localhost/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * updateIsConnected
     * UtilityNetworkService
     * @param body 
     * @param f 
     * @param token 
     * @param serverWebAdaptor 
     * @param utilityNetworkName 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public serverWebAdaptorRestServicesUtilityNetworkNameUtilityNetworkServerUpdateIsConnectedPost(body: Body, f: string, token: string, serverWebAdaptor: string, utilityNetworkName: string, observe?: 'body', reportProgress?: boolean): Observable<UpdateIsConnectedResponse>;
    public serverWebAdaptorRestServicesUtilityNetworkNameUtilityNetworkServerUpdateIsConnectedPost(body: Body, f: string, token: string, serverWebAdaptor: string, utilityNetworkName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UpdateIsConnectedResponse>>;
    public serverWebAdaptorRestServicesUtilityNetworkNameUtilityNetworkServerUpdateIsConnectedPost(body: Body, f: string, token: string, serverWebAdaptor: string, utilityNetworkName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UpdateIsConnectedResponse>>;
    public serverWebAdaptorRestServicesUtilityNetworkNameUtilityNetworkServerUpdateIsConnectedPost(body: Body, f: string, token: string, serverWebAdaptor: string, utilityNetworkName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling serverWebAdaptorRestServicesUtilityNetworkNameUtilityNetworkServerUpdateIsConnectedPost.');
        }

        if (f === null || f === undefined) {
            throw new Error('Required parameter f was null or undefined when calling serverWebAdaptorRestServicesUtilityNetworkNameUtilityNetworkServerUpdateIsConnectedPost.');
        }

        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling serverWebAdaptorRestServicesUtilityNetworkNameUtilityNetworkServerUpdateIsConnectedPost.');
        }

        if (serverWebAdaptor === null || serverWebAdaptor === undefined) {
            throw new Error('Required parameter serverWebAdaptor was null or undefined when calling serverWebAdaptorRestServicesUtilityNetworkNameUtilityNetworkServerUpdateIsConnectedPost.');
        }

        if (utilityNetworkName === null || utilityNetworkName === undefined) {
            throw new Error('Required parameter utilityNetworkName was null or undefined when calling serverWebAdaptorRestServicesUtilityNetworkNameUtilityNetworkServerUpdateIsConnectedPost.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (f !== undefined && f !== null) {
            queryParameters = queryParameters.set('f', <any>f);
        }
        if (token !== undefined && token !== null) {
            queryParameters = queryParameters.set('token', <any>token);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<UpdateIsConnectedResponse>('post',`${this.basePath}/${encodeURIComponent(String(serverWebAdaptor))}/rest/services/${encodeURIComponent(String(utilityNetworkName))}/UtilityNetworkServer/updateIsConnected`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
