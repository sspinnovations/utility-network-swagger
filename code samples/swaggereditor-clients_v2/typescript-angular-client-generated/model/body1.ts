/**
 * Swagger for Utility Network
 * Open API Specification (OAS/Swagger)  * **trace**, **updateIsConnected** from the [ArcGIS Utility Network](https://developers.arcgis.com/rest/services-reference/utility-network-service.htm) * **generateToken** from the [ArcGIS REST API](https://developers.arcgis.com/rest/)  Tested on ArcGIS  Enterprise 10.8.1 using OpenAPI Specification (OAC) written in [SwaggerEditor](https://github.com/swagger-api/swagger-editor)   and [SwaggerHub](https://app.swaggerhub.com/) for C# and Typescript-Angular code generation.  
 *
 * OpenAPI spec version: 3.0
 * Contact: kim.sundeen@sspinnovations.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

export interface Body1 { 
    /**
     * Optional parameter representing the output format of the response (default is JSON).
     */
    f: string;
    /**
     * The name of the geodatabase version.
     */
    gdbVersion?: string;
    /**
     * Optional parameter representing the token (guid) used to lock the version. If the calling client has previously started a service session (editing) and holds an exclusive lock on the specified version, the request will fail if the sessionId is not provided. If the specified version is currently locked by any other session, the request will fail if the sessionId is not provided or does not match the sessionId which holds the exclusive lock.
     */
    sessionId?: string;
    /**
     * Optional parameter representing the session moment (the default is the version current moment). This should only be specified by the client when they do not want to use the current moment.
     */
    moment?: string;
    /**
     * The trace type.
     */
    traceType: Body1.TraceTypeEnum;
    /**
     * ***Curently a workaround until figure out how to gen**The locations for starting and stopping points, as well as barriers. Optional parameter for subnetwork trace type, required parameter for all other trace types.
     */
    traceLocations: Array;
    /**
     * The locations for starting and stopping points, as well as barriers. Optional parameter for subnetwork trace type, required parameter for all other trace types.
     */
    traceConfiguration: any;
    /**
     * Optional parameter representing the types of results to return.
     */
    resultTypes: Array;
}
export namespace Body1 {
    export type TraceTypeEnum = 'upstream' | 'downstream' | 'connected' | 'subnetwork' | 'unknown' | 'loops' | 'shortestpath' | 'subnetworkcontroller';
    export const TraceTypeEnum = {
        Upstream: 'upstream' as TraceTypeEnum,
        Downstream: 'downstream' as TraceTypeEnum,
        Connected: 'connected' as TraceTypeEnum,
        Subnetwork: 'subnetwork' as TraceTypeEnum,
        Unknown: 'unknown' as TraceTypeEnum,
        Loops: 'loops' as TraceTypeEnum,
        Shortestpath: 'shortestpath' as TraceTypeEnum,
        Subnetworkcontroller: 'subnetworkcontroller' as TraceTypeEnum
    };
}