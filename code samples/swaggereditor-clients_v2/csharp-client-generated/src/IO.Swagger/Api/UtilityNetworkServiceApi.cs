/* 
 * Swagger for Utility Network
 *
 * Open API Specification (OAS/Swagger)  * **trace**, **updateIsConnected** from the [ArcGIS Utility Network](https://developers.arcgis.com/rest/services-reference/utility-network-service.htm) * **generateToken** from the [ArcGIS REST API](https://developers.arcgis.com/rest/)  Tested on ArcGIS  Enterprise 10.8.1 using OpenAPI Specification (OAC) written in [SwaggerEditor](https://github.com/swagger-api/swagger-editor)   and [SwaggerHub](https://app.swaggerhub.com/) for C# and Typescript-Angular code generation.  
 *
 * OpenAPI spec version: 3.0
 * Contact: kim.sundeen@sspinnovations.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IUtilityNetworkServiceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// generateToken
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="portalWebAdaptor"></param>
        /// <returns>TokenResponse</returns>
        TokenResponse PortalWebAdaptorSharingRestGenerateTokenPost (Body2 body, string portalWebAdaptor);

        /// <summary>
        /// generateToken
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="portalWebAdaptor"></param>
        /// <returns>ApiResponse of TokenResponse</returns>
        ApiResponse<TokenResponse> PortalWebAdaptorSharingRestGenerateTokenPostWithHttpInfo (Body2 body, string portalWebAdaptor);
        /// <summary>
        /// trace
        /// </summary>
        /// <remarks>
        /// Trace
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="token"></param>
        /// <param name="serverWebAdaptor"></param>
        /// <param name="utilityNetworkName"></param>
        /// <returns>TraceResultsSet</returns>
        TraceResultsSet Trace (Body1 body, string token, string serverWebAdaptor, string utilityNetworkName);

        /// <summary>
        /// trace
        /// </summary>
        /// <remarks>
        /// Trace
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="token"></param>
        /// <param name="serverWebAdaptor"></param>
        /// <param name="utilityNetworkName"></param>
        /// <returns>ApiResponse of TraceResultsSet</returns>
        ApiResponse<TraceResultsSet> TraceWithHttpInfo (Body1 body, string token, string serverWebAdaptor, string utilityNetworkName);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// generateToken
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="portalWebAdaptor"></param>
        /// <returns>Task of TokenResponse</returns>
        System.Threading.Tasks.Task<TokenResponse> PortalWebAdaptorSharingRestGenerateTokenPostAsync (Body2 body, string portalWebAdaptor);

        /// <summary>
        /// generateToken
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="portalWebAdaptor"></param>
        /// <returns>Task of ApiResponse (TokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TokenResponse>> PortalWebAdaptorSharingRestGenerateTokenPostAsyncWithHttpInfo (Body2 body, string portalWebAdaptor);
        /// <summary>
        /// trace
        /// </summary>
        /// <remarks>
        /// Trace
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="token"></param>
        /// <param name="serverWebAdaptor"></param>
        /// <param name="utilityNetworkName"></param>
        /// <returns>Task of TraceResultsSet</returns>
        System.Threading.Tasks.Task<TraceResultsSet> TraceAsync (Body1 body, string token, string serverWebAdaptor, string utilityNetworkName);

        /// <summary>
        /// trace
        /// </summary>
        /// <remarks>
        /// Trace
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="token"></param>
        /// <param name="serverWebAdaptor"></param>
        /// <param name="utilityNetworkName"></param>
        /// <returns>Task of ApiResponse (TraceResultsSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<TraceResultsSet>> TraceAsyncWithHttpInfo (Body1 body, string token, string serverWebAdaptor, string utilityNetworkName);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class UtilityNetworkServiceApi : IUtilityNetworkServiceApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UtilityNetworkServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UtilityNetworkServiceApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UtilityNetworkServiceApi"/> class
        /// </summary>
        /// <returns></returns>
        public UtilityNetworkServiceApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UtilityNetworkServiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UtilityNetworkServiceApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// generateToken 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="portalWebAdaptor"></param>
        /// <returns>TokenResponse</returns>
        public TokenResponse PortalWebAdaptorSharingRestGenerateTokenPost (Body2 body, string portalWebAdaptor)
        {
             ApiResponse<TokenResponse> localVarResponse = PortalWebAdaptorSharingRestGenerateTokenPostWithHttpInfo(body, portalWebAdaptor);
             return localVarResponse.Data;
        }

        /// <summary>
        /// generateToken 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="portalWebAdaptor"></param>
        /// <returns>ApiResponse of TokenResponse</returns>
        public ApiResponse< TokenResponse > PortalWebAdaptorSharingRestGenerateTokenPostWithHttpInfo (Body2 body, string portalWebAdaptor)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UtilityNetworkServiceApi->PortalWebAdaptorSharingRestGenerateTokenPost");
            // verify the required parameter 'portalWebAdaptor' is set
            if (portalWebAdaptor == null)
                throw new ApiException(400, "Missing required parameter 'portalWebAdaptor' when calling UtilityNetworkServiceApi->PortalWebAdaptorSharingRestGenerateTokenPost");

            var localVarPath = "/{PortalWebAdaptor}/sharing/rest/generateToken";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portalWebAdaptor != null) localVarPathParams.Add("PortalWebAdaptor", this.Configuration.ApiClient.ParameterToString(portalWebAdaptor)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalWebAdaptorSharingRestGenerateTokenPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TokenResponse)));
        }

        /// <summary>
        /// generateToken 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="portalWebAdaptor"></param>
        /// <returns>Task of TokenResponse</returns>
        public async System.Threading.Tasks.Task<TokenResponse> PortalWebAdaptorSharingRestGenerateTokenPostAsync (Body2 body, string portalWebAdaptor)
        {
             ApiResponse<TokenResponse> localVarResponse = await PortalWebAdaptorSharingRestGenerateTokenPostAsyncWithHttpInfo(body, portalWebAdaptor);
             return localVarResponse.Data;

        }

        /// <summary>
        /// generateToken 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="portalWebAdaptor"></param>
        /// <returns>Task of ApiResponse (TokenResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TokenResponse>> PortalWebAdaptorSharingRestGenerateTokenPostAsyncWithHttpInfo (Body2 body, string portalWebAdaptor)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UtilityNetworkServiceApi->PortalWebAdaptorSharingRestGenerateTokenPost");
            // verify the required parameter 'portalWebAdaptor' is set
            if (portalWebAdaptor == null)
                throw new ApiException(400, "Missing required parameter 'portalWebAdaptor' when calling UtilityNetworkServiceApi->PortalWebAdaptorSharingRestGenerateTokenPost");

            var localVarPath = "/{PortalWebAdaptor}/sharing/rest/generateToken";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (portalWebAdaptor != null) localVarPathParams.Add("PortalWebAdaptor", this.Configuration.ApiClient.ParameterToString(portalWebAdaptor)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PortalWebAdaptorSharingRestGenerateTokenPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TokenResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TokenResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TokenResponse)));
        }

        /// <summary>
        /// trace Trace
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="token"></param>
        /// <param name="serverWebAdaptor"></param>
        /// <param name="utilityNetworkName"></param>
        /// <returns>TraceResultsSet</returns>
        public TraceResultsSet Trace (Body1 body, string token, string serverWebAdaptor, string utilityNetworkName)
        {
             ApiResponse<TraceResultsSet> localVarResponse = TraceWithHttpInfo(body, token, serverWebAdaptor, utilityNetworkName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// trace Trace
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="token"></param>
        /// <param name="serverWebAdaptor"></param>
        /// <param name="utilityNetworkName"></param>
        /// <returns>ApiResponse of TraceResultsSet</returns>
        public ApiResponse< TraceResultsSet > TraceWithHttpInfo (Body1 body, string token, string serverWebAdaptor, string utilityNetworkName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UtilityNetworkServiceApi->Trace");
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling UtilityNetworkServiceApi->Trace");
            // verify the required parameter 'serverWebAdaptor' is set
            if (serverWebAdaptor == null)
                throw new ApiException(400, "Missing required parameter 'serverWebAdaptor' when calling UtilityNetworkServiceApi->Trace");
            // verify the required parameter 'utilityNetworkName' is set
            if (utilityNetworkName == null)
                throw new ApiException(400, "Missing required parameter 'utilityNetworkName' when calling UtilityNetworkServiceApi->Trace");

            var localVarPath = "/{ServerWebAdaptor}/rest/services/{UtilityNetworkName}/UtilityNetworkServer/trace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverWebAdaptor != null) localVarPathParams.Add("ServerWebAdaptor", this.Configuration.ApiClient.ParameterToString(serverWebAdaptor)); // path parameter
            if (utilityNetworkName != null) localVarPathParams.Add("UtilityNetworkName", this.Configuration.ApiClient.ParameterToString(utilityNetworkName)); // path parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Trace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TraceResultsSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TraceResultsSet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TraceResultsSet)));
        }

        /// <summary>
        /// trace Trace
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="token"></param>
        /// <param name="serverWebAdaptor"></param>
        /// <param name="utilityNetworkName"></param>
        /// <returns>Task of TraceResultsSet</returns>
        public async System.Threading.Tasks.Task<TraceResultsSet> TraceAsync (Body1 body, string token, string serverWebAdaptor, string utilityNetworkName)
        {
             ApiResponse<TraceResultsSet> localVarResponse = await TraceAsyncWithHttpInfo(body, token, serverWebAdaptor, utilityNetworkName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// trace Trace
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="token"></param>
        /// <param name="serverWebAdaptor"></param>
        /// <param name="utilityNetworkName"></param>
        /// <returns>Task of ApiResponse (TraceResultsSet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TraceResultsSet>> TraceAsyncWithHttpInfo (Body1 body, string token, string serverWebAdaptor, string utilityNetworkName)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UtilityNetworkServiceApi->Trace");
            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling UtilityNetworkServiceApi->Trace");
            // verify the required parameter 'serverWebAdaptor' is set
            if (serverWebAdaptor == null)
                throw new ApiException(400, "Missing required parameter 'serverWebAdaptor' when calling UtilityNetworkServiceApi->Trace");
            // verify the required parameter 'utilityNetworkName' is set
            if (utilityNetworkName == null)
                throw new ApiException(400, "Missing required parameter 'utilityNetworkName' when calling UtilityNetworkServiceApi->Trace");

            var localVarPath = "/{ServerWebAdaptor}/rest/services/{UtilityNetworkName}/UtilityNetworkServer/trace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (serverWebAdaptor != null) localVarPathParams.Add("ServerWebAdaptor", this.Configuration.ApiClient.ParameterToString(serverWebAdaptor)); // path parameter
            if (utilityNetworkName != null) localVarPathParams.Add("UtilityNetworkName", this.Configuration.ApiClient.ParameterToString(utilityNetworkName)); // path parameter
            if (token != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "token", token)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Trace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TraceResultsSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TraceResultsSet) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TraceResultsSet)));
        }

    }
}
