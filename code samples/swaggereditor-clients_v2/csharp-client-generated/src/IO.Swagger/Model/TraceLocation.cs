/* 
 * Swagger for Utility Network
 *
 * Open API Specification (OAS/Swagger)  * **trace**, **updateIsConnected** from the [ArcGIS Utility Network](https://developers.arcgis.com/rest/services-reference/utility-network-service.htm) * **generateToken** from the [ArcGIS REST API](https://developers.arcgis.com/rest/)  Tested on ArcGIS  Enterprise 10.8.1 using OpenAPI Specification (OAC) written in [SwaggerEditor](https://github.com/swagger-api/swagger-editor)   and [SwaggerHub](https://app.swaggerhub.com/) for C# and Typescript-Angular code generation.  
 *
 * OpenAPI spec version: 3.0
 * Contact: kim.sundeen@sspinnovations.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TraceLocation
    /// </summary>
    [DataContract]
        public partial class TraceLocation :  IEquatable<TraceLocation>, IValidatableObject
    {
        /// <summary>
        /// Defines TraceLocationType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum TraceLocationTypeEnum
        {
            /// <summary>
            /// Enum StartingPoint for value: startingPoint
            /// </summary>
            [EnumMember(Value = "startingPoint")]
            StartingPoint = 1,
            /// <summary>
            /// Enum StoppingPoint for value: stoppingPoint
            /// </summary>
            [EnumMember(Value = "stoppingPoint")]
            StoppingPoint = 2        }
        /// <summary>
        /// Gets or Sets TraceLocationType
        /// </summary>
        [DataMember(Name="traceLocationType", EmitDefaultValue=false)]
        public TraceLocationTypeEnum? TraceLocationType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TraceLocation" /> class.
        /// </summary>
        /// <param name="traceLocationType">traceLocationType.</param>
        /// <param name="globalId">globalId.</param>
        /// <param name="percentAlong">percentAlong.</param>
        public TraceLocation(TraceLocationTypeEnum? traceLocationType = default(TraceLocationTypeEnum?), string globalId = default(string), decimal? percentAlong = default(decimal?))
        {
            this.TraceLocationType = traceLocationType;
            this.GlobalId = globalId;
            this.PercentAlong = percentAlong;
        }
        

        /// <summary>
        /// Gets or Sets GlobalId
        /// </summary>
        [DataMember(Name="globalId", EmitDefaultValue=false)]
        public string GlobalId { get; set; }

        /// <summary>
        /// Gets or Sets PercentAlong
        /// </summary>
        [DataMember(Name="percentAlong", EmitDefaultValue=false)]
        public decimal? PercentAlong { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TraceLocation {\n");
            sb.Append("  TraceLocationType: ").Append(TraceLocationType).Append("\n");
            sb.Append("  GlobalId: ").Append(GlobalId).Append("\n");
            sb.Append("  PercentAlong: ").Append(PercentAlong).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TraceLocation);
        }

        /// <summary>
        /// Returns true if TraceLocation instances are equal
        /// </summary>
        /// <param name="input">Instance of TraceLocation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TraceLocation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TraceLocationType == input.TraceLocationType ||
                    (this.TraceLocationType != null &&
                    this.TraceLocationType.Equals(input.TraceLocationType))
                ) && 
                (
                    this.GlobalId == input.GlobalId ||
                    (this.GlobalId != null &&
                    this.GlobalId.Equals(input.GlobalId))
                ) && 
                (
                    this.PercentAlong == input.PercentAlong ||
                    (this.PercentAlong != null &&
                    this.PercentAlong.Equals(input.PercentAlong))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TraceLocationType != null)
                    hashCode = hashCode * 59 + this.TraceLocationType.GetHashCode();
                if (this.GlobalId != null)
                    hashCode = hashCode * 59 + this.GlobalId.GetHashCode();
                if (this.PercentAlong != null)
                    hashCode = hashCode * 59 + this.PercentAlong.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
