/* 
 * Swagger for Utility Network
 *
 * Open API Specification (OAS/Swagger)  * **trace**, **updateIsConnected** from the [ArcGIS Utility Network](https://developers.arcgis.com/rest/services-reference/utility-network-service.htm) * **generateToken** from the [ArcGIS REST API](https://developers.arcgis.com/rest/)  Tested on ArcGIS  Enterprise 10.8.1 using OpenAPI Specification (OAC) written in [SwaggerEditor](https://github.com/swagger-api/swagger-editor)   and [SwaggerHub](https://app.swaggerhub.com/) for C# and Typescript-Angular code generation.  
 *
 * OpenAPI spec version: 3.0
 * Contact: kim.sundeen@sspinnovations.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TraceResultsSetTraceResultsElements
    /// </summary>
    [DataContract]
        public partial class TraceResultsSetTraceResultsElements :  IEquatable<TraceResultsSetTraceResultsElements>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TraceResultsSetTraceResultsElements" /> class.
        /// </summary>
        /// <param name="networkSourceId">networkSourceId.</param>
        /// <param name="globalId">globalId.</param>
        /// <param name="objectId">objectId.</param>
        /// <param name="terminalId">terminalId.</param>
        /// <param name="assetGroupCode">assetGroupCode.</param>
        /// <param name="assetTypeCode">assetTypeCode.</param>
        public TraceResultsSetTraceResultsElements(decimal? networkSourceId = default(decimal?), string globalId = default(string), decimal? objectId = default(decimal?), decimal? terminalId = default(decimal?), decimal? assetGroupCode = default(decimal?), decimal? assetTypeCode = default(decimal?))
        {
            this.NetworkSourceId = networkSourceId;
            this.GlobalId = globalId;
            this.ObjectId = objectId;
            this.TerminalId = terminalId;
            this.AssetGroupCode = assetGroupCode;
            this.AssetTypeCode = assetTypeCode;
        }
        
        /// <summary>
        /// Gets or Sets NetworkSourceId
        /// </summary>
        [DataMember(Name="networkSourceId", EmitDefaultValue=false)]
        public decimal? NetworkSourceId { get; set; }

        /// <summary>
        /// Gets or Sets GlobalId
        /// </summary>
        [DataMember(Name="globalId", EmitDefaultValue=false)]
        public string GlobalId { get; set; }

        /// <summary>
        /// Gets or Sets ObjectId
        /// </summary>
        [DataMember(Name="objectId", EmitDefaultValue=false)]
        public decimal? ObjectId { get; set; }

        /// <summary>
        /// Gets or Sets TerminalId
        /// </summary>
        [DataMember(Name="terminalId", EmitDefaultValue=false)]
        public decimal? TerminalId { get; set; }

        /// <summary>
        /// Gets or Sets AssetGroupCode
        /// </summary>
        [DataMember(Name="assetGroupCode", EmitDefaultValue=false)]
        public decimal? AssetGroupCode { get; set; }

        /// <summary>
        /// Gets or Sets AssetTypeCode
        /// </summary>
        [DataMember(Name="assetTypeCode", EmitDefaultValue=false)]
        public decimal? AssetTypeCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TraceResultsSetTraceResultsElements {\n");
            sb.Append("  NetworkSourceId: ").Append(NetworkSourceId).Append("\n");
            sb.Append("  GlobalId: ").Append(GlobalId).Append("\n");
            sb.Append("  ObjectId: ").Append(ObjectId).Append("\n");
            sb.Append("  TerminalId: ").Append(TerminalId).Append("\n");
            sb.Append("  AssetGroupCode: ").Append(AssetGroupCode).Append("\n");
            sb.Append("  AssetTypeCode: ").Append(AssetTypeCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TraceResultsSetTraceResultsElements);
        }

        /// <summary>
        /// Returns true if TraceResultsSetTraceResultsElements instances are equal
        /// </summary>
        /// <param name="input">Instance of TraceResultsSetTraceResultsElements to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TraceResultsSetTraceResultsElements input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NetworkSourceId == input.NetworkSourceId ||
                    (this.NetworkSourceId != null &&
                    this.NetworkSourceId.Equals(input.NetworkSourceId))
                ) && 
                (
                    this.GlobalId == input.GlobalId ||
                    (this.GlobalId != null &&
                    this.GlobalId.Equals(input.GlobalId))
                ) && 
                (
                    this.ObjectId == input.ObjectId ||
                    (this.ObjectId != null &&
                    this.ObjectId.Equals(input.ObjectId))
                ) && 
                (
                    this.TerminalId == input.TerminalId ||
                    (this.TerminalId != null &&
                    this.TerminalId.Equals(input.TerminalId))
                ) && 
                (
                    this.AssetGroupCode == input.AssetGroupCode ||
                    (this.AssetGroupCode != null &&
                    this.AssetGroupCode.Equals(input.AssetGroupCode))
                ) && 
                (
                    this.AssetTypeCode == input.AssetTypeCode ||
                    (this.AssetTypeCode != null &&
                    this.AssetTypeCode.Equals(input.AssetTypeCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NetworkSourceId != null)
                    hashCode = hashCode * 59 + this.NetworkSourceId.GetHashCode();
                if (this.GlobalId != null)
                    hashCode = hashCode * 59 + this.GlobalId.GetHashCode();
                if (this.ObjectId != null)
                    hashCode = hashCode * 59 + this.ObjectId.GetHashCode();
                if (this.TerminalId != null)
                    hashCode = hashCode * 59 + this.TerminalId.GetHashCode();
                if (this.AssetGroupCode != null)
                    hashCode = hashCode * 59 + this.AssetGroupCode.GetHashCode();
                if (this.AssetTypeCode != null)
                    hashCode = hashCode * 59 + this.AssetTypeCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
