/* 
 * Swagger for Utility Network
 *
 * Open API Specification (OAS/Swagger)  * **trace**, **updateIsConnected** from the [ArcGIS Utility Network](https://developers.arcgis.com/rest/services-reference/utility-network-service.htm) * **generateToken** from the [ArcGIS REST API](https://developers.arcgis.com/rest/)  Tested on ArcGIS  Enterprise 10.8.1 using OpenAPI Specification (OAC) written in [SwaggerEditor](https://github.com/swagger-api/swagger-editor)   and [SwaggerHub](https://app.swaggerhub.com/) for C# and Typescript-Angular code generation.  
 *
 * OpenAPI spec version: 3.0
 * Contact: kim.sundeen@sspinnovations.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// OutputFilter
    /// </summary>
    [DataContract]
        public partial class OutputFilter :  IEquatable<OutputFilter>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OutputFilter" /> class.
        /// </summary>
        /// <param name="sourceId">sourceId (required).</param>
        /// <param name="assetGroup">assetGroup (required).</param>
        /// <param name="assetType">assetType (required).</param>
        public OutputFilter(decimal? sourceId = default(decimal?), decimal? assetGroup = default(decimal?), decimal? assetType = default(decimal?))
        {
            // to ensure "sourceId" is required (not null)
            if (sourceId == null)
            {
                throw new InvalidDataException("sourceId is a required property for OutputFilter and cannot be null");
            }
            else
            {
                this.SourceId = sourceId;
            }
            // to ensure "assetGroup" is required (not null)
            if (assetGroup == null)
            {
                throw new InvalidDataException("assetGroup is a required property for OutputFilter and cannot be null");
            }
            else
            {
                this.AssetGroup = assetGroup;
            }
            // to ensure "assetType" is required (not null)
            if (assetType == null)
            {
                throw new InvalidDataException("assetType is a required property for OutputFilter and cannot be null");
            }
            else
            {
                this.AssetType = assetType;
            }
        }
        
        /// <summary>
        /// Gets or Sets SourceId
        /// </summary>
        [DataMember(Name="sourceId", EmitDefaultValue=false)]
        public decimal? SourceId { get; set; }

        /// <summary>
        /// Gets or Sets AssetGroup
        /// </summary>
        [DataMember(Name="assetGroup", EmitDefaultValue=false)]
        public decimal? AssetGroup { get; set; }

        /// <summary>
        /// Gets or Sets AssetType
        /// </summary>
        [DataMember(Name="assetType", EmitDefaultValue=false)]
        public decimal? AssetType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OutputFilter {\n");
            sb.Append("  SourceId: ").Append(SourceId).Append("\n");
            sb.Append("  AssetGroup: ").Append(AssetGroup).Append("\n");
            sb.Append("  AssetType: ").Append(AssetType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OutputFilter);
        }

        /// <summary>
        /// Returns true if OutputFilter instances are equal
        /// </summary>
        /// <param name="input">Instance of OutputFilter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OutputFilter input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SourceId == input.SourceId ||
                    (this.SourceId != null &&
                    this.SourceId.Equals(input.SourceId))
                ) && 
                (
                    this.AssetGroup == input.AssetGroup ||
                    (this.AssetGroup != null &&
                    this.AssetGroup.Equals(input.AssetGroup))
                ) && 
                (
                    this.AssetType == input.AssetType ||
                    (this.AssetType != null &&
                    this.AssetType.Equals(input.AssetType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SourceId != null)
                    hashCode = hashCode * 59 + this.SourceId.GetHashCode();
                if (this.AssetGroup != null)
                    hashCode = hashCode * 59 + this.AssetGroup.GetHashCode();
                if (this.AssetType != null)
                    hashCode = hashCode * 59 + this.AssetType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
