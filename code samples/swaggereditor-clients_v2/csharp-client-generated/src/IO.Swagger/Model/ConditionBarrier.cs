/* 
 * Swagger for Utility Network
 *
 * Open API Specification (OAS/Swagger)  * **trace**, **updateIsConnected** from the [ArcGIS Utility Network](https://developers.arcgis.com/rest/services-reference/utility-network-service.htm) * **generateToken** from the [ArcGIS REST API](https://developers.arcgis.com/rest/)  Tested on ArcGIS  Enterprise 10.8.1 using OpenAPI Specification (OAC) written in [SwaggerEditor](https://github.com/swagger-api/swagger-editor)   and [SwaggerHub](https://app.swaggerhub.com/) for C# and Typescript-Angular code generation.  
 *
 * OpenAPI spec version: 3.0
 * Contact: kim.sundeen@sspinnovations.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ConditionBarrier
    /// </summary>
    [DataContract]
        public partial class ConditionBarrier :  IEquatable<ConditionBarrier>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConditionBarrier" /> class.
        /// </summary>
        /// <param name="networkAttributeName">networkAttributeName (required).</param>
        /// <param name="_operator">_operator (required).</param>
        /// <param name="value">0 &#x3D; unknown, 1 &#x3D; open, 2 &#x3D; closed (required).</param>
        /// <param name="combineUsingOr">combineUsingOr (required).</param>
        /// <param name="isTypeSpecificValue">isTypeSpecificValue (required).</param>
        public ConditionBarrier(string networkAttributeName = default(string), string _operator = default(string), decimal? value = default(decimal?), bool? combineUsingOr = default(bool?), bool? isTypeSpecificValue = default(bool?))
        {
            // to ensure "networkAttributeName" is required (not null)
            if (networkAttributeName == null)
            {
                throw new InvalidDataException("networkAttributeName is a required property for ConditionBarrier and cannot be null");
            }
            else
            {
                this.NetworkAttributeName = networkAttributeName;
            }
            // to ensure "_operator" is required (not null)
            if (_operator == null)
            {
                throw new InvalidDataException("_operator is a required property for ConditionBarrier and cannot be null");
            }
            else
            {
                this.Operator = _operator;
            }
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new InvalidDataException("value is a required property for ConditionBarrier and cannot be null");
            }
            else
            {
                this.Value = value;
            }
            // to ensure "combineUsingOr" is required (not null)
            if (combineUsingOr == null)
            {
                throw new InvalidDataException("combineUsingOr is a required property for ConditionBarrier and cannot be null");
            }
            else
            {
                this.CombineUsingOr = combineUsingOr;
            }
            // to ensure "isTypeSpecificValue" is required (not null)
            if (isTypeSpecificValue == null)
            {
                throw new InvalidDataException("isTypeSpecificValue is a required property for ConditionBarrier and cannot be null");
            }
            else
            {
                this.IsTypeSpecificValue = isTypeSpecificValue;
            }
        }
        
        /// <summary>
        /// Gets or Sets NetworkAttributeName
        /// </summary>
        [DataMember(Name="networkAttributeName", EmitDefaultValue=false)]
        public string NetworkAttributeName { get; set; }

        /// <summary>
        /// Gets or Sets Operator
        /// </summary>
        [DataMember(Name="operator", EmitDefaultValue=false)]
        public string Operator { get; set; }

        /// <summary>
        /// 0 &#x3D; unknown, 1 &#x3D; open, 2 &#x3D; closed
        /// </summary>
        /// <value>0 &#x3D; unknown, 1 &#x3D; open, 2 &#x3D; closed</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public decimal? Value { get; set; }

        /// <summary>
        /// Gets or Sets CombineUsingOr
        /// </summary>
        [DataMember(Name="combineUsingOr", EmitDefaultValue=false)]
        public bool? CombineUsingOr { get; set; }

        /// <summary>
        /// Gets or Sets IsTypeSpecificValue
        /// </summary>
        [DataMember(Name="isTypeSpecificValue", EmitDefaultValue=false)]
        public bool? IsTypeSpecificValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConditionBarrier {\n");
            sb.Append("  NetworkAttributeName: ").Append(NetworkAttributeName).Append("\n");
            sb.Append("  Operator: ").Append(Operator).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  CombineUsingOr: ").Append(CombineUsingOr).Append("\n");
            sb.Append("  IsTypeSpecificValue: ").Append(IsTypeSpecificValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConditionBarrier);
        }

        /// <summary>
        /// Returns true if ConditionBarrier instances are equal
        /// </summary>
        /// <param name="input">Instance of ConditionBarrier to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConditionBarrier input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NetworkAttributeName == input.NetworkAttributeName ||
                    (this.NetworkAttributeName != null &&
                    this.NetworkAttributeName.Equals(input.NetworkAttributeName))
                ) && 
                (
                    this.Operator == input.Operator ||
                    (this.Operator != null &&
                    this.Operator.Equals(input.Operator))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.CombineUsingOr == input.CombineUsingOr ||
                    (this.CombineUsingOr != null &&
                    this.CombineUsingOr.Equals(input.CombineUsingOr))
                ) && 
                (
                    this.IsTypeSpecificValue == input.IsTypeSpecificValue ||
                    (this.IsTypeSpecificValue != null &&
                    this.IsTypeSpecificValue.Equals(input.IsTypeSpecificValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NetworkAttributeName != null)
                    hashCode = hashCode * 59 + this.NetworkAttributeName.GetHashCode();
                if (this.Operator != null)
                    hashCode = hashCode * 59 + this.Operator.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.CombineUsingOr != null)
                    hashCode = hashCode * 59 + this.CombineUsingOr.GetHashCode();
                if (this.IsTypeSpecificValue != null)
                    hashCode = hashCode * 59 + this.IsTypeSpecificValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
