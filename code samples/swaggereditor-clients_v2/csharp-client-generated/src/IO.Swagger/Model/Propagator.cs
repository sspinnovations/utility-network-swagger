/* 
 * Swagger for Utility Network
 *
 * Open API Specification (OAS/Swagger)  * **trace**, **updateIsConnected** from the [ArcGIS Utility Network](https://developers.arcgis.com/rest/services-reference/utility-network-service.htm) * **generateToken** from the [ArcGIS REST API](https://developers.arcgis.com/rest/)  Tested on ArcGIS  Enterprise 10.8.1 using OpenAPI Specification (OAC) written in [SwaggerEditor](https://github.com/swagger-api/swagger-editor)   and [SwaggerHub](https://app.swaggerhub.com/) for C# and Typescript-Angular code generation.  
 *
 * OpenAPI spec version: 3.0
 * Contact: kim.sundeen@sspinnovations.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Propagator
    /// </summary>
    [DataContract]
        public partial class Propagator :  IEquatable<Propagator>, IValidatableObject
    {
        /// <summary>
        /// Defines FunctionType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum FunctionTypeEnum
        {
            /// <summary>
            /// Enum BitwiseAnd for value: bitwiseAnd
            /// </summary>
            [EnumMember(Value = "bitwiseAnd")]
            BitwiseAnd = 1,
            /// <summary>
            /// Enum Min for value: min
            /// </summary>
            [EnumMember(Value = "min")]
            Min = 2,
            /// <summary>
            /// Enum Max for value: max
            /// </summary>
            [EnumMember(Value = "max")]
            Max = 3        }
        /// <summary>
        /// Gets or Sets FunctionType
        /// </summary>
        [DataMember(Name="functionType", EmitDefaultValue=false)]
        public FunctionTypeEnum FunctionType { get; set; }
        /// <summary>
        /// Defines Operator
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum OperatorEnum
        {
            /// <summary>
            /// Enum Equal for value: equal
            /// </summary>
            [EnumMember(Value = "equal")]
            Equal = 1,
            /// <summary>
            /// Enum NotEqual for value: notEqual
            /// </summary>
            [EnumMember(Value = "notEqual")]
            NotEqual = 2,
            /// <summary>
            /// Enum BitwiseAnd for value: bitwiseAnd
            /// </summary>
            [EnumMember(Value = "bitwiseAnd")]
            BitwiseAnd = 3,
            /// <summary>
            /// Enum Greater for value: greater
            /// </summary>
            [EnumMember(Value = "greater")]
            Greater = 4,
            /// <summary>
            /// Enum GreaterEqual for value: greaterEqual
            /// </summary>
            [EnumMember(Value = "greaterEqual")]
            GreaterEqual = 5,
            /// <summary>
            /// Enum Less for value: less
            /// </summary>
            [EnumMember(Value = "less")]
            Less = 6,
            /// <summary>
            /// Enum LessEqual for value: lessEqual
            /// </summary>
            [EnumMember(Value = "lessEqual")]
            LessEqual = 7        }
        /// <summary>
        /// Gets or Sets Operator
        /// </summary>
        [DataMember(Name="operator", EmitDefaultValue=false)]
        public OperatorEnum Operator { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Propagator" /> class.
        /// </summary>
        /// <param name="networkAttributeName">networkAttributeName (required).</param>
        /// <param name="functionType">functionType (required).</param>
        /// <param name="_operator">_operator (required).</param>
        /// <param name="value">string (numeric) (required).</param>
        public Propagator(string networkAttributeName = default(string), FunctionTypeEnum functionType = default(FunctionTypeEnum), OperatorEnum _operator = default(OperatorEnum), string value = default(string))
        {
            // to ensure "networkAttributeName" is required (not null)
            if (networkAttributeName == null)
            {
                throw new InvalidDataException("networkAttributeName is a required property for Propagator and cannot be null");
            }
            else
            {
                this.NetworkAttributeName = networkAttributeName;
            }
            // to ensure "functionType" is required (not null)
            if (functionType == null)
            {
                throw new InvalidDataException("functionType is a required property for Propagator and cannot be null");
            }
            else
            {
                this.FunctionType = functionType;
            }
            // to ensure "_operator" is required (not null)
            if (_operator == null)
            {
                throw new InvalidDataException("_operator is a required property for Propagator and cannot be null");
            }
            else
            {
                this.Operator = _operator;
            }
            // to ensure "value" is required (not null)
            if (value == null)
            {
                throw new InvalidDataException("value is a required property for Propagator and cannot be null");
            }
            else
            {
                this.Value = value;
            }
        }
        
        /// <summary>
        /// Gets or Sets NetworkAttributeName
        /// </summary>
        [DataMember(Name="networkAttributeName", EmitDefaultValue=false)]
        public string NetworkAttributeName { get; set; }



        /// <summary>
        /// string (numeric)
        /// </summary>
        /// <value>string (numeric)</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Propagator {\n");
            sb.Append("  NetworkAttributeName: ").Append(NetworkAttributeName).Append("\n");
            sb.Append("  FunctionType: ").Append(FunctionType).Append("\n");
            sb.Append("  Operator: ").Append(Operator).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Propagator);
        }

        /// <summary>
        /// Returns true if Propagator instances are equal
        /// </summary>
        /// <param name="input">Instance of Propagator to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Propagator input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.NetworkAttributeName == input.NetworkAttributeName ||
                    (this.NetworkAttributeName != null &&
                    this.NetworkAttributeName.Equals(input.NetworkAttributeName))
                ) && 
                (
                    this.FunctionType == input.FunctionType ||
                    (this.FunctionType != null &&
                    this.FunctionType.Equals(input.FunctionType))
                ) && 
                (
                    this.Operator == input.Operator ||
                    (this.Operator != null &&
                    this.Operator.Equals(input.Operator))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NetworkAttributeName != null)
                    hashCode = hashCode * 59 + this.NetworkAttributeName.GetHashCode();
                if (this.FunctionType != null)
                    hashCode = hashCode * 59 + this.FunctionType.GetHashCode();
                if (this.Operator != null)
                    hashCode = hashCode * 59 + this.Operator.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
