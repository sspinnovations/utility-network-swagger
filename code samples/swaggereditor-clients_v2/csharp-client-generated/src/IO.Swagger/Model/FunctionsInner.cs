/* 
 * Swagger for Utility Network
 *
 * Open API Specification (OAS/Swagger)  * **trace**, **updateIsConnected** from the [ArcGIS Utility Network](https://developers.arcgis.com/rest/services-reference/utility-network-service.htm) * **generateToken** from the [ArcGIS REST API](https://developers.arcgis.com/rest/)  Tested on ArcGIS  Enterprise 10.8.1 using OpenAPI Specification (OAC) written in [SwaggerEditor](https://github.com/swagger-api/swagger-editor)   and [SwaggerHub](https://app.swaggerhub.com/) for C# and Typescript-Angular code generation.  
 *
 * OpenAPI spec version: 3.0
 * Contact: kim.sundeen@sspinnovations.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// FunctionsInner
    /// </summary>
    [DataContract]
        public partial class FunctionsInner :  IEquatable<FunctionsInner>, IValidatableObject
    {
        /// <summary>
        /// Defines FunctionType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum FunctionTypeEnum
        {
            /// <summary>
            /// Enum Add for value: add
            /// </summary>
            [EnumMember(Value = "add")]
            Add = 1,
            /// <summary>
            /// Enum Subtract for value: subtract
            /// </summary>
            [EnumMember(Value = "subtract")]
            Subtract = 2,
            /// <summary>
            /// Enum Average for value: average
            /// </summary>
            [EnumMember(Value = "average")]
            Average = 3,
            /// <summary>
            /// Enum Count for value: count
            /// </summary>
            [EnumMember(Value = "count")]
            Count = 4,
            /// <summary>
            /// Enum Min for value: min
            /// </summary>
            [EnumMember(Value = "min")]
            Min = 5,
            /// <summary>
            /// Enum Max for value: max
            /// </summary>
            [EnumMember(Value = "max")]
            Max = 6        }
        /// <summary>
        /// Gets or Sets FunctionType
        /// </summary>
        [DataMember(Name="functionType", EmitDefaultValue=false)]
        public FunctionTypeEnum FunctionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FunctionsInner" /> class.
        /// </summary>
        /// <param name="functionType">functionType (required).</param>
        /// <param name="networkAttributeName">networkAttributeName (required).</param>
        /// <param name="networkAttributeConditions">networkAttributeConditions.</param>
        public FunctionsInner(FunctionTypeEnum functionType = default(FunctionTypeEnum), string networkAttributeName = default(string), List<Object> networkAttributeConditions = default(List<Object>))
        {
            // to ensure "functionType" is required (not null)
            if (functionType == null)
            {
                throw new InvalidDataException("functionType is a required property for FunctionsInner and cannot be null");
            }
            else
            {
                this.FunctionType = functionType;
            }
            // to ensure "networkAttributeName" is required (not null)
            if (networkAttributeName == null)
            {
                throw new InvalidDataException("networkAttributeName is a required property for FunctionsInner and cannot be null");
            }
            else
            {
                this.NetworkAttributeName = networkAttributeName;
            }
            this.NetworkAttributeConditions = networkAttributeConditions;
        }
        

        /// <summary>
        /// Gets or Sets NetworkAttributeName
        /// </summary>
        [DataMember(Name="networkAttributeName", EmitDefaultValue=false)]
        public string NetworkAttributeName { get; set; }

        /// <summary>
        /// Gets or Sets NetworkAttributeConditions
        /// </summary>
        [DataMember(Name="networkAttributeConditions", EmitDefaultValue=false)]
        public List<Object> NetworkAttributeConditions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FunctionsInner {\n");
            sb.Append("  FunctionType: ").Append(FunctionType).Append("\n");
            sb.Append("  NetworkAttributeName: ").Append(NetworkAttributeName).Append("\n");
            sb.Append("  NetworkAttributeConditions: ").Append(NetworkAttributeConditions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FunctionsInner);
        }

        /// <summary>
        /// Returns true if FunctionsInner instances are equal
        /// </summary>
        /// <param name="input">Instance of FunctionsInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FunctionsInner input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FunctionType == input.FunctionType ||
                    (this.FunctionType != null &&
                    this.FunctionType.Equals(input.FunctionType))
                ) && 
                (
                    this.NetworkAttributeName == input.NetworkAttributeName ||
                    (this.NetworkAttributeName != null &&
                    this.NetworkAttributeName.Equals(input.NetworkAttributeName))
                ) && 
                (
                    this.NetworkAttributeConditions == input.NetworkAttributeConditions ||
                    this.NetworkAttributeConditions != null &&
                    input.NetworkAttributeConditions != null &&
                    this.NetworkAttributeConditions.SequenceEqual(input.NetworkAttributeConditions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FunctionType != null)
                    hashCode = hashCode * 59 + this.FunctionType.GetHashCode();
                if (this.NetworkAttributeName != null)
                    hashCode = hashCode * 59 + this.NetworkAttributeName.GetHashCode();
                if (this.NetworkAttributeConditions != null)
                    hashCode = hashCode * 59 + this.NetworkAttributeConditions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
