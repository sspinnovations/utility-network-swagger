/* 
 * Swagger for Utility Network
 *
 * Open API Specification (OAS/Swagger)  * **trace**, **updateIsConnected** from the [ArcGIS Utility Network](https://developers.arcgis.com/rest/services-reference/utility-network-service.htm) * **generateToken** from the [ArcGIS REST API](https://developers.arcgis.com/rest/)  Tested on ArcGIS  Enterprise 10.8.1 using OpenAPI Specification (OAC) written in [SwaggerEditor](https://github.com/swagger-api/swagger-editor)   and [SwaggerHub](https://app.swaggerhub.com/) for C# and Typescript-Angular code generation.  
 *
 * OpenAPI spec version: 3.0
 * Contact: kim.sundeen@sspinnovations.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// TraceResultsSetTraceResults
    /// </summary>
    [DataContract]
        public partial class TraceResultsSetTraceResults :  IEquatable<TraceResultsSetTraceResults>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TraceResultsSetTraceResults" /> class.
        /// </summary>
        /// <param name="elements">elements.</param>
        /// <param name="diagramName">diagramName.</param>
        /// <param name="globalFunctionResults">globalFunctionResults.</param>
        /// <param name="kFeaturesForKNNFound">kFeaturesForKNNFound.</param>
        /// <param name="startingPointsIgnored">startingPointsIgnored.</param>
        /// <param name="warnings">warnings.</param>
        public TraceResultsSetTraceResults(List<TraceResultsSetTraceResultsElements> elements = default(List<TraceResultsSetTraceResultsElements>), string diagramName = default(string), List<string> globalFunctionResults = default(List<string>), bool? kFeaturesForKNNFound = default(bool?), bool? startingPointsIgnored = default(bool?), List<string> warnings = default(List<string>))
        {
            this.Elements = elements;
            this.DiagramName = diagramName;
            this.GlobalFunctionResults = globalFunctionResults;
            this.KFeaturesForKNNFound = kFeaturesForKNNFound;
            this.StartingPointsIgnored = startingPointsIgnored;
            this.Warnings = warnings;
        }
        
        /// <summary>
        /// Gets or Sets Elements
        /// </summary>
        [DataMember(Name="elements", EmitDefaultValue=false)]
        public List<TraceResultsSetTraceResultsElements> Elements { get; set; }

        /// <summary>
        /// Gets or Sets DiagramName
        /// </summary>
        [DataMember(Name="diagramName", EmitDefaultValue=false)]
        public string DiagramName { get; set; }

        /// <summary>
        /// Gets or Sets GlobalFunctionResults
        /// </summary>
        [DataMember(Name="globalFunctionResults", EmitDefaultValue=false)]
        public List<string> GlobalFunctionResults { get; set; }

        /// <summary>
        /// Gets or Sets KFeaturesForKNNFound
        /// </summary>
        [DataMember(Name="kFeaturesForKNNFound", EmitDefaultValue=false)]
        public bool? KFeaturesForKNNFound { get; set; }

        /// <summary>
        /// Gets or Sets StartingPointsIgnored
        /// </summary>
        [DataMember(Name="startingPointsIgnored", EmitDefaultValue=false)]
        public bool? StartingPointsIgnored { get; set; }

        /// <summary>
        /// Gets or Sets Warnings
        /// </summary>
        [DataMember(Name="warnings", EmitDefaultValue=false)]
        public List<string> Warnings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TraceResultsSetTraceResults {\n");
            sb.Append("  Elements: ").Append(Elements).Append("\n");
            sb.Append("  DiagramName: ").Append(DiagramName).Append("\n");
            sb.Append("  GlobalFunctionResults: ").Append(GlobalFunctionResults).Append("\n");
            sb.Append("  KFeaturesForKNNFound: ").Append(KFeaturesForKNNFound).Append("\n");
            sb.Append("  StartingPointsIgnored: ").Append(StartingPointsIgnored).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TraceResultsSetTraceResults);
        }

        /// <summary>
        /// Returns true if TraceResultsSetTraceResults instances are equal
        /// </summary>
        /// <param name="input">Instance of TraceResultsSetTraceResults to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TraceResultsSetTraceResults input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Elements == input.Elements ||
                    this.Elements != null &&
                    input.Elements != null &&
                    this.Elements.SequenceEqual(input.Elements)
                ) && 
                (
                    this.DiagramName == input.DiagramName ||
                    (this.DiagramName != null &&
                    this.DiagramName.Equals(input.DiagramName))
                ) && 
                (
                    this.GlobalFunctionResults == input.GlobalFunctionResults ||
                    this.GlobalFunctionResults != null &&
                    input.GlobalFunctionResults != null &&
                    this.GlobalFunctionResults.SequenceEqual(input.GlobalFunctionResults)
                ) && 
                (
                    this.KFeaturesForKNNFound == input.KFeaturesForKNNFound ||
                    (this.KFeaturesForKNNFound != null &&
                    this.KFeaturesForKNNFound.Equals(input.KFeaturesForKNNFound))
                ) && 
                (
                    this.StartingPointsIgnored == input.StartingPointsIgnored ||
                    (this.StartingPointsIgnored != null &&
                    this.StartingPointsIgnored.Equals(input.StartingPointsIgnored))
                ) && 
                (
                    this.Warnings == input.Warnings ||
                    this.Warnings != null &&
                    input.Warnings != null &&
                    this.Warnings.SequenceEqual(input.Warnings)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Elements != null)
                    hashCode = hashCode * 59 + this.Elements.GetHashCode();
                if (this.DiagramName != null)
                    hashCode = hashCode * 59 + this.DiagramName.GetHashCode();
                if (this.GlobalFunctionResults != null)
                    hashCode = hashCode * 59 + this.GlobalFunctionResults.GetHashCode();
                if (this.KFeaturesForKNNFound != null)
                    hashCode = hashCode * 59 + this.KFeaturesForKNNFound.GetHashCode();
                if (this.StartingPointsIgnored != null)
                    hashCode = hashCode * 59 + this.StartingPointsIgnored.GetHashCode();
                if (this.Warnings != null)
                    hashCode = hashCode * 59 + this.Warnings.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
