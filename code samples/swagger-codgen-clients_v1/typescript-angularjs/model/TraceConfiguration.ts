/**
 * Swagger for Utility Network
 * Open API Specification (OAS/Swagger)  * **trace**, **updateIsConnected** from the [ArcGIS Utility Network]( https://developers.arcgis.com/rest/services-reference/utility-network-service.htm) * **generateToken** from the [ArcGIS REST API](https://developers.arcgis.com/rest/)  Tested on ArcGIS  Enterprise 10.6.1 using [NSwagStudio](https://github.com/RSuter/NSwag/wiki/NSwagStudio) C# code gen . 
 *
 * OpenAPI spec version: 0.13
 * Contact: 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

export interface TraceConfiguration {
    /**
     * Optional parameter representing whether or not to include containers in the trace result (default is false).
     */
    "includeContainers"?: boolean;
    /**
     * Optional parameter representing whether or not to include content in the trace result (default is false).
     */
    "includeContent"?: boolean;
    /**
     * Optional parameter representing whether or not to include structures in the trace result (default is false).
     */
    "includeStructures"?: boolean;
    /**
     * Optional parameter representing whether or not to include barrier features that stop a trace in the trace result (default is true).
     */
    "includeBarriers"?: boolean;
    /**
     * Optional parameter representing whether or not to validate the consistency of the trace results (default is false).
     */
    "validateConsistency"?: boolean;
    /**
     * Optional parameter that specifies the name of the domain network where the trace is starting.
     */
    "domainNetworkName"?: string;
    /**
     * Optional parameter that specifies the name of the tier where the trace is starting.
     */
    "tierName"?: string;
    /**
     * Optional parameter representing the name of the tier where upstream or downstream trace ends.
     */
    "targetTierName"?: string;
    /**
     * Optional parameter representing the name of the subnetwork that will be traced - the starting points of the trace will be the controllers of this subnetwork .
     */
    "subnetworkName"?: string;
    /**
     * Optional parameter representing the name of the diagram template.
     */
    "diagramTemplateName"?: string;
    /**
     * Required parameter for shortest path trace ; optional otherwise. It represents the network attribute name used for determining cost when calulating the shortest path.
     */
    "shortestPathNetworkAttributeName"?: string;
    /**
     * Optional parameter. Used during loops trace to only return loops with the same bit set all around the loop. Used during upstream/downstream traces to ensure that trace results include any bit that is set in the starting points for the network attribute.
     */
    "filterBitsetNetworkAttributeName"?: string;
    /**
     * Optional parameters representing which network element types the condition, category, or function barriers apply to (default is junctionsAndEdges).
     */
    "traversabilityScope"?: TraceConfiguration.TraversabilityScopeEnum;
    /**
     * Optional parameter containing an array of objects (representing network attribute conditions) that serve as barriers - default is null. If isTypeSpecificValue is true, the network attribute is being compared with a specific value ; otherwise the network attribute is being compared with another network attribute.
     */
    "conditionBarriers": Array<models.ConditionBarrier>;
    /**
     * The categories that serve as barriers (default is none) : optional parameter.
     */
    "categoryBarriers"?: Array<string>;
    /**
     * optional parameter.
     */
    "functionBarriers": Array<models.FunctionBarrier>;
    "arcadeExpressionBarrier"?: string;
    /**
     * A second pass is done over the trace results and all results after these categories are encountered are filtered (default is none) : optional parameter.
     */
    "filterBarriers": Array<string>;
    "filterFunctionBarriers": Array<string>;
    "filterScope"?: string;
    /**
     * Optional parameter ; an array of objects representing functions. Each function may have an optional array of network attribute conditions.
     */
    "functions": any;
    "nearestNeighbor": models.NearestNeighborParam;
    "outputFilters": Array<models.TraceOutputCondition>;
    /**
     * The categories associated with the output filter (default is none) ; optional parameter.
     */
    "outputConditions": Array<models.OutputFilter>;
    "propagators": Array<models.Propagator>;
}

export namespace TraceConfiguration {
    export enum TraversabilityScopeEnum {
        Junctions = <any> 'junctions',
        Edges = <any> 'edges',
        JunctionsAndEdges = <any> 'junctionsAndEdges'
    }
}
