/**
 * Swagger for Utility Network
 * Open API Specification (OAS/Swagger)  * **trace**, **updateIsConnected** from the [ArcGIS Utility Network]( https://developers.arcgis.com/rest/services-reference/utility-network-service.htm) * **generateToken** from the [ArcGIS REST API](https://developers.arcgis.com/rest/)  Tested on ArcGIS  Enterprise 10.6.1 using [NSwagStudio](https://github.com/RSuter/NSwag/wiki/NSwagStudio) C# code gen . 
 *
 * OpenAPI spec version: 0.13
 * Contact: 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class DefaultApi {
    protected basePath = 'https://t4e7j4g.restletmocks.net';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

    constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }

    /**
     * UtilityNetworkService
     * @summary updateIsConnected
     * @param serverWebAdaptor 
     * @param utilityNetworkName 
     * @param f 
     * @param token 
     */
    public serverWebAdaptorRestServicesUtilityNetworkNameUtilityNetworkServerUpdateIsConnectedPost (serverWebAdaptor: string, utilityNetworkName: string, f: string, token: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.UpdateIsConnectedResponse> {
        const localVarPath = this.basePath + '/{ServerWebAdaptor}/rest/services/{UtilityNetworkName}/UtilityNetworkServer/updateIsConnected'
            .replace('{' + 'ServerWebAdaptor' + '}', encodeURIComponent(String(serverWebAdaptor)))
            .replace('{' + 'UtilityNetworkName' + '}', encodeURIComponent(String(utilityNetworkName)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'serverWebAdaptor' is not null or undefined
        if (serverWebAdaptor === null || serverWebAdaptor === undefined) {
            throw new Error('Required parameter serverWebAdaptor was null or undefined when calling serverWebAdaptorRestServicesUtilityNetworkNameUtilityNetworkServerUpdateIsConnectedPost.');
        }

        // verify required parameter 'utilityNetworkName' is not null or undefined
        if (utilityNetworkName === null || utilityNetworkName === undefined) {
            throw new Error('Required parameter utilityNetworkName was null or undefined when calling serverWebAdaptorRestServicesUtilityNetworkNameUtilityNetworkServerUpdateIsConnectedPost.');
        }

        // verify required parameter 'f' is not null or undefined
        if (f === null || f === undefined) {
            throw new Error('Required parameter f was null or undefined when calling serverWebAdaptorRestServicesUtilityNetworkNameUtilityNetworkServerUpdateIsConnectedPost.');
        }

        // verify required parameter 'token' is not null or undefined
        if (token === null || token === undefined) {
            throw new Error('Required parameter token was null or undefined when calling serverWebAdaptorRestServicesUtilityNetworkNameUtilityNetworkServerUpdateIsConnectedPost.');
        }

        if (f !== undefined) {
            queryParameters['f'] = f;
        }

        if (token !== undefined) {
            queryParameters['token'] = token;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
}
