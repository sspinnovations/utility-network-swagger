/**
 * Swagger for Utility Network
 * Open API Specification (OAS/Swagger)  * **trace**, **updateIsConnected** from the [ArcGIS Utility Network]( https://developers.arcgis.com/rest/services-reference/utility-network-service.htm) * **generateToken** from the [ArcGIS REST API](https://developers.arcgis.com/rest/)  Tested on ArcGIS  Enterprise 10.6.1 using [NSwagStudio](https://github.com/RSuter/NSwag/wiki/NSwagStudio) C# code gen . 
 *
 * OpenAPI spec version: 0.13
 * Contact: 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.model

import io.swagger.client.core.ApiModel
import org.joda.time.DateTime
import java.util.UUID

case class TraceConfiguration (
  /* Optional parameter representing whether or not to include containers in the trace result (default is false). */
  includeContainers: Option[Boolean],
  /* Optional parameter representing whether or not to include content in the trace result (default is false). */
  includeContent: Option[Boolean],
  /* Optional parameter representing whether or not to include structures in the trace result (default is false). */
  includeStructures: Option[Boolean],
  /* Optional parameter representing whether or not to include barrier features that stop a trace in the trace result (default is true). */
  includeBarriers: Option[Boolean],
  /* Optional parameter representing whether or not to validate the consistency of the trace results (default is false). */
  validateConsistency: Option[Boolean],
  /* Optional parameter that specifies the name of the domain network where the trace is starting. */
  domainNetworkName: Option[String],
  /* Optional parameter that specifies the name of the tier where the trace is starting. */
  tierName: Option[String],
  /* Optional parameter representing the name of the tier where upstream or downstream trace ends. */
  targetTierName: Option[String],
  /* Optional parameter representing the name of the subnetwork that will be traced - the starting points of the trace will be the controllers of this subnetwork . */
  subnetworkName: Option[String],
  /* Optional parameter representing the name of the diagram template. */
  diagramTemplateName: Option[String],
  /* Required parameter for shortest path trace ; optional otherwise. It represents the network attribute name used for determining cost when calulating the shortest path. */
  shortestPathNetworkAttributeName: Option[String],
  /* Optional parameter. Used during loops trace to only return loops with the same bit set all around the loop. Used during upstream/downstream traces to ensure that trace results include any bit that is set in the starting points for the network attribute. */
  filterBitsetNetworkAttributeName: Option[String],
  /* Optional parameters representing which network element types the condition, category, or function barriers apply to (default is junctionsAndEdges). */
  traversabilityScope: Option[TraceConfigurationEnums.TraversabilityScope],
  /* Optional parameter containing an array of objects (representing network attribute conditions) that serve as barriers - default is null. If isTypeSpecificValue is true, the network attribute is being compared with a specific value ; otherwise the network attribute is being compared with another network attribute. */
  conditionBarriers: Seq[ConditionBarrier],
  /* The categories that serve as barriers (default is none) : optional parameter. */
  categoryBarriers: Option[Seq[String]],
  /* optional parameter. */
  functionBarriers: Seq[FunctionBarrier],
  arcadeExpressionBarrier: Option[String],
  /* A second pass is done over the trace results and all results after these categories are encountered are filtered (default is none) : optional parameter. */
  filterBarriers: Seq[String],
  filterFunctionBarriers: Seq[String],
  filterScope: Option[String],
  /* Optional parameter ; an array of objects representing functions. Each function may have an optional array of network attribute conditions. */
  functions: Any,
  nearestNeighbor: NearestNeighborParam,
  outputFilters: Seq[TraceOutputCondition],
  /* The categories associated with the output filter (default is none) ; optional parameter. */
  outputConditions: Seq[OutputFilter],
  propagators: Seq[Propagator]
) extends ApiModel

object TraceConfigurationEnums {

  type TraversabilityScope = TraversabilityScope.Value
  object TraversabilityScope extends Enumeration {
    val Junctions = Value("junctions")
    val Edges = Value("edges")
    val JunctionsAndEdges = Value("junctionsAndEdges")
  }

}

