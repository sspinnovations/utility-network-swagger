/**
 * Swagger for Utility Network
 * Open API Specification (OAS/Swagger)  * **trace**, **updateIsConnected** from the [ArcGIS Utility Network]( https://developers.arcgis.com/rest/services-reference/utility-network-service.htm) * **generateToken** from the [ArcGIS REST API](https://developers.arcgis.com/rest/)  Tested on ArcGIS  Enterprise 10.6.1 using [NSwagStudio](https://github.com/RSuter/NSwag/wiki/NSwagStudio) C# code gen . 
 *
 * OpenAPI spec version: 0.13
 * Contact: 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "TraceOutputCondition.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

TraceOutputCondition::TraceOutputCondition()
{
    m_Name = utility::conversions::to_string_t("");
    m_Type = utility::conversions::to_string_t("");
    m__operator = utility::conversions::to_string_t("");
    m_Value = 0.0;
    m_ValueIsSet = false;
    m_CombineUsingOr = false;
    m_CombineUsingOrIsSet = false;
    m_IsSpecificValue = false;
}

TraceOutputCondition::~TraceOutputCondition()
{
}

void TraceOutputCondition::validate()
{
    // TODO: implement validation
}

web::json::value TraceOutputCondition::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);
    val[utility::conversions::to_string_t("operator")] = ModelBase::toJson(m__operator);
    if(m_ValueIsSet)
    {
        val[utility::conversions::to_string_t("value")] = ModelBase::toJson(m_Value);
    }
    if(m_CombineUsingOrIsSet)
    {
        val[utility::conversions::to_string_t("combineUsingOr")] = ModelBase::toJson(m_CombineUsingOr);
    }
    val[utility::conversions::to_string_t("isSpecificValue")] = ModelBase::toJson(m_IsSpecificValue);

    return val;
}

void TraceOutputCondition::fromJson(web::json::value& val)
{
    setName(ModelBase::stringFromJson(val[utility::conversions::to_string_t("name")]));
    setType(ModelBase::stringFromJson(val[utility::conversions::to_string_t("type")]));
    setOperator(ModelBase::stringFromJson(val[utility::conversions::to_string_t("operator")]));
    if(val.has_field(utility::conversions::to_string_t("value")))
    {
        setValue(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("value")]));
    }
    if(val.has_field(utility::conversions::to_string_t("combineUsingOr")))
    {
        setCombineUsingOr(ModelBase::boolFromJson(val[utility::conversions::to_string_t("combineUsingOr")]));
    }
    setIsSpecificValue(ModelBase::boolFromJson(val[utility::conversions::to_string_t("isSpecificValue")]));
}

void TraceOutputCondition::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("operator"), m__operator));
    if(m_ValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("value"), m_Value));
    }
    if(m_CombineUsingOrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("combineUsingOr"), m_CombineUsingOr));
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isSpecificValue"), m_IsSpecificValue));
}

void TraceOutputCondition::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("name"))));
    setType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("type"))));
    setOperator(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("operator"))));
    if(multipart->hasContent(utility::conversions::to_string_t("value")))
    {
        setValue(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("value"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("combineUsingOr")))
    {
        setCombineUsingOr(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("combineUsingOr"))));
    }
    setIsSpecificValue(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("isSpecificValue"))));
}

utility::string_t TraceOutputCondition::getName() const
{
    return m_Name;
}


void TraceOutputCondition::setName(utility::string_t value)
{
    m_Name = value;
    
}
utility::string_t TraceOutputCondition::getType() const
{
    return m_Type;
}


void TraceOutputCondition::setType(utility::string_t value)
{
    m_Type = value;
    
}
utility::string_t TraceOutputCondition::getOperator() const
{
    return m__operator;
}


void TraceOutputCondition::setOperator(utility::string_t value)
{
    m__operator = value;
    
}
double TraceOutputCondition::getValue() const
{
    return m_Value;
}


void TraceOutputCondition::setValue(double value)
{
    m_Value = value;
    m_ValueIsSet = true;
}
bool TraceOutputCondition::valueIsSet() const
{
    return m_ValueIsSet;
}

void TraceOutputCondition::unsetValue()
{
    m_ValueIsSet = false;
}

bool TraceOutputCondition::isCombineUsingOr() const
{
    return m_CombineUsingOr;
}


void TraceOutputCondition::setCombineUsingOr(bool value)
{
    m_CombineUsingOr = value;
    m_CombineUsingOrIsSet = true;
}
bool TraceOutputCondition::combineUsingOrIsSet() const
{
    return m_CombineUsingOrIsSet;
}

void TraceOutputCondition::unsetCombineUsingOr()
{
    m_CombineUsingOrIsSet = false;
}

bool TraceOutputCondition::isIsSpecificValue() const
{
    return m_IsSpecificValue;
}


void TraceOutputCondition::setIsSpecificValue(bool value)
{
    m_IsSpecificValue = value;
    
}
}
}
}
}

