/**
 * Swagger for Utility Network
 * Open API Specification (OAS/Swagger)  * **trace**, **updateIsConnected** from the [ArcGIS Utility Network]( https://developers.arcgis.com/rest/services-reference/utility-network-service.htm) * **generateToken** from the [ArcGIS REST API](https://developers.arcgis.com/rest/)  Tested on ArcGIS  Enterprise 10.6.1 using [NSwagStudio](https://github.com/RSuter/NSwag/wiki/NSwagStudio) C# code gen . 
 *
 * OpenAPI spec version: 0.13
 * Contact: 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Feature.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Feature::Feature()
{
    m_NetworkSourceId = utility::conversions::to_string_t("");
    m_NetworkSourceIdIsSet = false;
    m_GlobalId = utility::conversions::to_string_t("");
    m_GlobalIdIsSet = false;
    m_ObjectId = 0.0;
    m_ObjectIdIsSet = false;
    m_TerminalId = 0.0;
    m_TerminalIdIsSet = false;
    m_NetworkAttributesIsSet = false;
    m_AssetGroup = 0.0;
    m_AssetGroupIsSet = false;
    m_AssetType = 0.0;
    m_AssetTypeIsSet = false;
}

Feature::~Feature()
{
}

void Feature::validate()
{
    // TODO: implement validation
}

web::json::value Feature::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_NetworkSourceIdIsSet)
    {
        val[utility::conversions::to_string_t("networkSourceId")] = ModelBase::toJson(m_NetworkSourceId);
    }
    if(m_GlobalIdIsSet)
    {
        val[utility::conversions::to_string_t("globalId")] = ModelBase::toJson(m_GlobalId);
    }
    if(m_ObjectIdIsSet)
    {
        val[utility::conversions::to_string_t("objectId")] = ModelBase::toJson(m_ObjectId);
    }
    if(m_TerminalIdIsSet)
    {
        val[utility::conversions::to_string_t("terminalId")] = ModelBase::toJson(m_TerminalId);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_NetworkAttributes )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("networkAttributes")] = web::json::value::array(jsonArray);
        }
    }
    if(m_AssetGroupIsSet)
    {
        val[utility::conversions::to_string_t("assetGroup")] = ModelBase::toJson(m_AssetGroup);
    }
    if(m_AssetTypeIsSet)
    {
        val[utility::conversions::to_string_t("assetType")] = ModelBase::toJson(m_AssetType);
    }

    return val;
}

void Feature::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("networkSourceId")))
    {
        setNetworkSourceId(ModelBase::stringFromJson(val[utility::conversions::to_string_t("networkSourceId")]));
    }
    if(val.has_field(utility::conversions::to_string_t("globalId")))
    {
        setGlobalId(ModelBase::stringFromJson(val[utility::conversions::to_string_t("globalId")]));
    }
    if(val.has_field(utility::conversions::to_string_t("objectId")))
    {
        setObjectId(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("objectId")]));
    }
    if(val.has_field(utility::conversions::to_string_t("terminalId")))
    {
        setTerminalId(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("terminalId")]));
    }
    {
        m_NetworkAttributes.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("networkAttributes")))
        {
        for( auto& item : val[utility::conversions::to_string_t("networkAttributes")].as_array() )
        {
            m_NetworkAttributes.push_back(ModelBase::doubleFromJson(item));
        }
        }
    }
    if(val.has_field(utility::conversions::to_string_t("assetGroup")))
    {
        setAssetGroup(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("assetGroup")]));
    }
    if(val.has_field(utility::conversions::to_string_t("assetType")))
    {
        setAssetType(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("assetType")]));
    }
}

void Feature::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_NetworkSourceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("networkSourceId"), m_NetworkSourceId));
        
    }
    if(m_GlobalIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("globalId"), m_GlobalId));
        
    }
    if(m_ObjectIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("objectId"), m_ObjectId));
    }
    if(m_TerminalIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("terminalId"), m_TerminalId));
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_NetworkAttributes )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("networkAttributes"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    if(m_AssetGroupIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("assetGroup"), m_AssetGroup));
    }
    if(m_AssetTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("assetType"), m_AssetType));
    }
}

void Feature::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("networkSourceId")))
    {
        setNetworkSourceId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("networkSourceId"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("globalId")))
    {
        setGlobalId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("globalId"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("objectId")))
    {
        setObjectId(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("objectId"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("terminalId")))
    {
        setTerminalId(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("terminalId"))));
    }
    {
        m_NetworkAttributes.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("networkAttributes")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("networkAttributes"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_NetworkAttributes.push_back(ModelBase::doubleFromJson(item));
        }
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("assetGroup")))
    {
        setAssetGroup(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("assetGroup"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("assetType")))
    {
        setAssetType(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("assetType"))));
    }
}

utility::string_t Feature::getNetworkSourceId() const
{
    return m_NetworkSourceId;
}


void Feature::setNetworkSourceId(utility::string_t value)
{
    m_NetworkSourceId = value;
    m_NetworkSourceIdIsSet = true;
}
bool Feature::networkSourceIdIsSet() const
{
    return m_NetworkSourceIdIsSet;
}

void Feature::unsetNetworkSourceId()
{
    m_NetworkSourceIdIsSet = false;
}

utility::string_t Feature::getGlobalId() const
{
    return m_GlobalId;
}


void Feature::setGlobalId(utility::string_t value)
{
    m_GlobalId = value;
    m_GlobalIdIsSet = true;
}
bool Feature::globalIdIsSet() const
{
    return m_GlobalIdIsSet;
}

void Feature::unsetGlobalId()
{
    m_GlobalIdIsSet = false;
}

double Feature::getObjectId() const
{
    return m_ObjectId;
}


void Feature::setObjectId(double value)
{
    m_ObjectId = value;
    m_ObjectIdIsSet = true;
}
bool Feature::objectIdIsSet() const
{
    return m_ObjectIdIsSet;
}

void Feature::unsetObjectId()
{
    m_ObjectIdIsSet = false;
}

double Feature::getTerminalId() const
{
    return m_TerminalId;
}


void Feature::setTerminalId(double value)
{
    m_TerminalId = value;
    m_TerminalIdIsSet = true;
}
bool Feature::terminalIdIsSet() const
{
    return m_TerminalIdIsSet;
}

void Feature::unsetTerminalId()
{
    m_TerminalIdIsSet = false;
}

std::vector<double>& Feature::getNetworkAttributes()
{
    return m_NetworkAttributes;
}

void Feature::setNetworkAttributes(std::vector<double> value)
{
    m_NetworkAttributes = value;
    m_NetworkAttributesIsSet = true;
}
bool Feature::networkAttributesIsSet() const
{
    return m_NetworkAttributesIsSet;
}

void Feature::unsetNetworkAttributes()
{
    m_NetworkAttributesIsSet = false;
}

double Feature::getAssetGroup() const
{
    return m_AssetGroup;
}


void Feature::setAssetGroup(double value)
{
    m_AssetGroup = value;
    m_AssetGroupIsSet = true;
}
bool Feature::assetGroupIsSet() const
{
    return m_AssetGroupIsSet;
}

void Feature::unsetAssetGroup()
{
    m_AssetGroupIsSet = false;
}

double Feature::getAssetType() const
{
    return m_AssetType;
}


void Feature::setAssetType(double value)
{
    m_AssetType = value;
    m_AssetTypeIsSet = true;
}
bool Feature::assetTypeIsSet() const
{
    return m_AssetTypeIsSet;
}

void Feature::unsetAssetType()
{
    m_AssetTypeIsSet = false;
}

}
}
}
}

