/**
 * Swagger for Utility Network
 * Open API Specification (OAS/Swagger)  * **trace**, **updateIsConnected** from the [ArcGIS Utility Network]( https://developers.arcgis.com/rest/services-reference/utility-network-service.htm) * **generateToken** from the [ArcGIS REST API](https://developers.arcgis.com/rest/)  Tested on ArcGIS  Enterprise 10.6.1 using [NSwagStudio](https://github.com/RSuter/NSwag/wiki/NSwagStudio) C# code gen . 
 *
 * OpenAPI spec version: 0.13
 * Contact: 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * TraceConfiguration.h
 *
 * 
 */

#ifndef IO_SWAGGER_CLIENT_MODEL_TraceConfiguration_H_
#define IO_SWAGGER_CLIENT_MODEL_TraceConfiguration_H_


#include "../ModelBase.h"

#include "OutputFilter.h"
#include "ConditionBarrier.h"
#include "Propagator.h"
#include "FunctionBarrier.h"
#include <cpprest/details/basic_types.h>
#include "TraceOutputCondition.h"
#include "NearestNeighborParam.h"
#include "Object.h"
#include <vector>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  TraceConfiguration
    : public ModelBase
{
public:
    TraceConfiguration();
    virtual ~TraceConfiguration();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// TraceConfiguration members

    /// <summary>
    /// Optional parameter representing whether or not to include containers in the trace result (default is false).
    /// </summary>
    bool isIncludeContainers() const;
    bool includeContainersIsSet() const;
    void unsetIncludeContainers();
    void setIncludeContainers(bool value);
    /// <summary>
    /// Optional parameter representing whether or not to include content in the trace result (default is false).
    /// </summary>
    bool isIncludeContent() const;
    bool includeContentIsSet() const;
    void unsetIncludeContent();
    void setIncludeContent(bool value);
    /// <summary>
    /// Optional parameter representing whether or not to include structures in the trace result (default is false).
    /// </summary>
    bool isIncludeStructures() const;
    bool includeStructuresIsSet() const;
    void unsetIncludeStructures();
    void setIncludeStructures(bool value);
    /// <summary>
    /// Optional parameter representing whether or not to include barrier features that stop a trace in the trace result (default is true).
    /// </summary>
    bool isIncludeBarriers() const;
    bool includeBarriersIsSet() const;
    void unsetIncludeBarriers();
    void setIncludeBarriers(bool value);
    /// <summary>
    /// Optional parameter representing whether or not to validate the consistency of the trace results (default is false).
    /// </summary>
    bool isValidateConsistency() const;
    bool validateConsistencyIsSet() const;
    void unsetValidateConsistency();
    void setValidateConsistency(bool value);
    /// <summary>
    /// Optional parameter that specifies the name of the domain network where the trace is starting.
    /// </summary>
    utility::string_t getDomainNetworkName() const;
    bool domainNetworkNameIsSet() const;
    void unsetDomainNetworkName();
    void setDomainNetworkName(utility::string_t value);
    /// <summary>
    /// Optional parameter that specifies the name of the tier where the trace is starting.
    /// </summary>
    utility::string_t getTierName() const;
    bool tierNameIsSet() const;
    void unsetTierName();
    void setTierName(utility::string_t value);
    /// <summary>
    /// Optional parameter representing the name of the tier where upstream or downstream trace ends.
    /// </summary>
    utility::string_t getTargetTierName() const;
    bool targetTierNameIsSet() const;
    void unsetTargetTierName();
    void setTargetTierName(utility::string_t value);
    /// <summary>
    /// Optional parameter representing the name of the subnetwork that will be traced - the starting points of the trace will be the controllers of this subnetwork .
    /// </summary>
    utility::string_t getSubnetworkName() const;
    bool subnetworkNameIsSet() const;
    void unsetSubnetworkName();
    void setSubnetworkName(utility::string_t value);
    /// <summary>
    /// Optional parameter representing the name of the diagram template.
    /// </summary>
    utility::string_t getDiagramTemplateName() const;
    bool diagramTemplateNameIsSet() const;
    void unsetDiagramTemplateName();
    void setDiagramTemplateName(utility::string_t value);
    /// <summary>
    /// Required parameter for shortest path trace ; optional otherwise. It represents the network attribute name used for determining cost when calulating the shortest path.
    /// </summary>
    utility::string_t getShortestPathNetworkAttributeName() const;
    bool shortestPathNetworkAttributeNameIsSet() const;
    void unsetShortestPathNetworkAttributeName();
    void setShortestPathNetworkAttributeName(utility::string_t value);
    /// <summary>
    /// Optional parameter. Used during loops trace to only return loops with the same bit set all around the loop. Used during upstream/downstream traces to ensure that trace results include any bit that is set in the starting points for the network attribute.
    /// </summary>
    utility::string_t getFilterBitsetNetworkAttributeName() const;
    bool filterBitsetNetworkAttributeNameIsSet() const;
    void unsetFilterBitsetNetworkAttributeName();
    void setFilterBitsetNetworkAttributeName(utility::string_t value);
    /// <summary>
    /// Optional parameters representing which network element types the condition, category, or function barriers apply to (default is junctionsAndEdges).
    /// </summary>
    utility::string_t getTraversabilityScope() const;
    bool traversabilityScopeIsSet() const;
    void unsetTraversabilityScope();
    void setTraversabilityScope(utility::string_t value);
    /// <summary>
    /// Optional parameter containing an array of objects (representing network attribute conditions) that serve as barriers - default is null. If isTypeSpecificValue is true, the network attribute is being compared with a specific value ; otherwise the network attribute is being compared with another network attribute.
    /// </summary>
    std::vector<std::shared_ptr<ConditionBarrier>>& getConditionBarriers();
        void setConditionBarriers(std::vector<std::shared_ptr<ConditionBarrier>> value);
    /// <summary>
    /// The categories that serve as barriers (default is none) : optional parameter.
    /// </summary>
    std::vector<utility::string_t>& getCategoryBarriers();
    bool categoryBarriersIsSet() const;
    void unsetCategoryBarriers();
    void setCategoryBarriers(std::vector<utility::string_t> value);
    /// <summary>
    /// optional parameter.
    /// </summary>
    std::vector<std::shared_ptr<FunctionBarrier>>& getFunctionBarriers();
        void setFunctionBarriers(std::vector<std::shared_ptr<FunctionBarrier>> value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getArcadeExpressionBarrier() const;
    bool arcadeExpressionBarrierIsSet() const;
    void unsetArcadeExpressionBarrier();
    void setArcadeExpressionBarrier(utility::string_t value);
    /// <summary>
    /// A second pass is done over the trace results and all results after these categories are encountered are filtered (default is none) : optional parameter.
    /// </summary>
    std::vector<utility::string_t>& getFilterBarriers();
        void setFilterBarriers(std::vector<utility::string_t> value);
    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getFilterFunctionBarriers();
        void setFilterFunctionBarriers(std::vector<utility::string_t> value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getFilterScope() const;
    bool filterScopeIsSet() const;
    void unsetFilterScope();
    void setFilterScope(utility::string_t value);
    /// <summary>
    /// Optional parameter ; an array of objects representing functions. Each function may have an optional array of network attribute conditions.
    /// </summary>
    std::shared_ptr<Object> getFunctions() const;
        void setFunctions(std::shared_ptr<Object> value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<NearestNeighborParam> getNearestNeighbor() const;
        void setNearestNeighbor(std::shared_ptr<NearestNeighborParam> value);
    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<TraceOutputCondition>>& getOutputFilters();
        void setOutputFilters(std::vector<std::shared_ptr<TraceOutputCondition>> value);
    /// <summary>
    /// The categories associated with the output filter (default is none) ; optional parameter.
    /// </summary>
    std::vector<std::shared_ptr<OutputFilter>>& getOutputConditions();
        void setOutputConditions(std::vector<std::shared_ptr<OutputFilter>> value);
    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<Propagator>>& getPropagators();
        void setPropagators(std::vector<std::shared_ptr<Propagator>> value);

protected:
    bool m_IncludeContainers;
    bool m_IncludeContainersIsSet;
    bool m_IncludeContent;
    bool m_IncludeContentIsSet;
    bool m_IncludeStructures;
    bool m_IncludeStructuresIsSet;
    bool m_IncludeBarriers;
    bool m_IncludeBarriersIsSet;
    bool m_ValidateConsistency;
    bool m_ValidateConsistencyIsSet;
    utility::string_t m_DomainNetworkName;
    bool m_DomainNetworkNameIsSet;
    utility::string_t m_TierName;
    bool m_TierNameIsSet;
    utility::string_t m_TargetTierName;
    bool m_TargetTierNameIsSet;
    utility::string_t m_SubnetworkName;
    bool m_SubnetworkNameIsSet;
    utility::string_t m_DiagramTemplateName;
    bool m_DiagramTemplateNameIsSet;
    utility::string_t m_ShortestPathNetworkAttributeName;
    bool m_ShortestPathNetworkAttributeNameIsSet;
    utility::string_t m_FilterBitsetNetworkAttributeName;
    bool m_FilterBitsetNetworkAttributeNameIsSet;
    utility::string_t m_TraversabilityScope;
    bool m_TraversabilityScopeIsSet;
    std::vector<std::shared_ptr<ConditionBarrier>> m_ConditionBarriers;
        std::vector<utility::string_t> m_CategoryBarriers;
    bool m_CategoryBarriersIsSet;
    std::vector<std::shared_ptr<FunctionBarrier>> m_FunctionBarriers;
        utility::string_t m_ArcadeExpressionBarrier;
    bool m_ArcadeExpressionBarrierIsSet;
    std::vector<utility::string_t> m_FilterBarriers;
        std::vector<utility::string_t> m_FilterFunctionBarriers;
        utility::string_t m_FilterScope;
    bool m_FilterScopeIsSet;
    std::shared_ptr<Object> m_Functions;
        std::shared_ptr<NearestNeighborParam> m_NearestNeighbor;
        std::vector<std::shared_ptr<TraceOutputCondition>> m_OutputFilters;
        std::vector<std::shared_ptr<OutputFilter>> m_OutputConditions;
        std::vector<std::shared_ptr<Propagator>> m_Propagators;
    };

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_MODEL_TraceConfiguration_H_ */
