/**
 * Swagger for Utility Network
 * Open API Specification (OAS/Swagger)  * **trace**, **updateIsConnected** from the [ArcGIS Utility Network]( https://developers.arcgis.com/rest/services-reference/utility-network-service.htm) * **generateToken** from the [ArcGIS REST API](https://developers.arcgis.com/rest/)  Tested on ArcGIS  Enterprise 10.6.1 using [NSwagStudio](https://github.com/RSuter/NSwag/wiki/NSwagStudio) C# code gen . 
 *
 * OpenAPI spec version: 0.13
 * Contact: 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Propagator.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Propagator::Propagator()
{
    m_NetworkAttributeName = utility::conversions::to_string_t("");
    m_FunctionType = utility::conversions::to_string_t("");
    m__operator = utility::conversions::to_string_t("");
    m_Value = utility::conversions::to_string_t("");
}

Propagator::~Propagator()
{
}

void Propagator::validate()
{
    // TODO: implement validation
}

web::json::value Propagator::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("networkAttributeName")] = ModelBase::toJson(m_NetworkAttributeName);
    val[utility::conversions::to_string_t("functionType")] = ModelBase::toJson(m_FunctionType);
    val[utility::conversions::to_string_t("operator")] = ModelBase::toJson(m__operator);
    val[utility::conversions::to_string_t("value")] = ModelBase::toJson(m_Value);

    return val;
}

void Propagator::fromJson(web::json::value& val)
{
    setNetworkAttributeName(ModelBase::stringFromJson(val[utility::conversions::to_string_t("networkAttributeName")]));
    setFunctionType(ModelBase::stringFromJson(val[utility::conversions::to_string_t("functionType")]));
    setOperator(ModelBase::stringFromJson(val[utility::conversions::to_string_t("operator")]));
    setValue(ModelBase::stringFromJson(val[utility::conversions::to_string_t("value")]));
}

void Propagator::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("networkAttributeName"), m_NetworkAttributeName));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("functionType"), m_FunctionType));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("operator"), m__operator));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("value"), m_Value));
}

void Propagator::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setNetworkAttributeName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("networkAttributeName"))));
    setFunctionType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("functionType"))));
    setOperator(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("operator"))));
    setValue(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("value"))));
}

utility::string_t Propagator::getNetworkAttributeName() const
{
    return m_NetworkAttributeName;
}


void Propagator::setNetworkAttributeName(utility::string_t value)
{
    m_NetworkAttributeName = value;
    
}
utility::string_t Propagator::getFunctionType() const
{
    return m_FunctionType;
}


void Propagator::setFunctionType(utility::string_t value)
{
    m_FunctionType = value;
    
}
utility::string_t Propagator::getOperator() const
{
    return m__operator;
}


void Propagator::setOperator(utility::string_t value)
{
    m__operator = value;
    
}
utility::string_t Propagator::getValue() const
{
    return m_Value;
}


void Propagator::setValue(utility::string_t value)
{
    m_Value = value;
    
}
}
}
}
}

