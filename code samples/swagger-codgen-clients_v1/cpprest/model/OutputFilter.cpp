/**
 * Swagger for Utility Network
 * Open API Specification (OAS/Swagger)  * **trace**, **updateIsConnected** from the [ArcGIS Utility Network]( https://developers.arcgis.com/rest/services-reference/utility-network-service.htm) * **generateToken** from the [ArcGIS REST API](https://developers.arcgis.com/rest/)  Tested on ArcGIS  Enterprise 10.6.1 using [NSwagStudio](https://github.com/RSuter/NSwag/wiki/NSwagStudio) C# code gen . 
 *
 * OpenAPI spec version: 0.13
 * Contact: 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "OutputFilter.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

OutputFilter::OutputFilter()
{
    m_SourceId = 0.0;
    m_AssetGroup = 0.0;
    m_AssetType = 0.0;
}

OutputFilter::~OutputFilter()
{
}

void OutputFilter::validate()
{
    // TODO: implement validation
}

web::json::value OutputFilter::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("sourceId")] = ModelBase::toJson(m_SourceId);
    val[utility::conversions::to_string_t("assetGroup")] = ModelBase::toJson(m_AssetGroup);
    val[utility::conversions::to_string_t("assetType")] = ModelBase::toJson(m_AssetType);

    return val;
}

void OutputFilter::fromJson(web::json::value& val)
{
    setSourceId(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("sourceId")]));
    setAssetGroup(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("assetGroup")]));
    setAssetType(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("assetType")]));
}

void OutputFilter::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sourceId"), m_SourceId));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("assetGroup"), m_AssetGroup));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("assetType"), m_AssetType));
}

void OutputFilter::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setSourceId(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("sourceId"))));
    setAssetGroup(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("assetGroup"))));
    setAssetType(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("assetType"))));
}

double OutputFilter::getSourceId() const
{
    return m_SourceId;
}


void OutputFilter::setSourceId(double value)
{
    m_SourceId = value;
    
}
double OutputFilter::getAssetGroup() const
{
    return m_AssetGroup;
}


void OutputFilter::setAssetGroup(double value)
{
    m_AssetGroup = value;
    
}
double OutputFilter::getAssetType() const
{
    return m_AssetType;
}


void OutputFilter::setAssetType(double value)
{
    m_AssetType = value;
    
}
}
}
}
}

