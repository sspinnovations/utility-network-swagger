/**
 * Swagger for Utility Network
 * Open API Specification (OAS/Swagger)  * **trace**, **updateIsConnected** from the [ArcGIS Utility Network]( https://developers.arcgis.com/rest/services-reference/utility-network-service.htm) * **generateToken** from the [ArcGIS REST API](https://developers.arcgis.com/rest/)  Tested on ArcGIS  Enterprise 10.6.1 using [NSwagStudio](https://github.com/RSuter/NSwag/wiki/NSwagStudio) C# code gen . 
 *
 * OpenAPI spec version: 0.13
 * Contact: 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "TraceLocation.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

TraceLocation::TraceLocation()
{
    m_TraceLocationType = utility::conversions::to_string_t("");
    m_TraceLocationTypeIsSet = false;
    m_GlobalId = utility::conversions::to_string_t("");
    m_GlobalIdIsSet = false;
    m_PercentAlong = 0.0;
    m_PercentAlongIsSet = false;
}

TraceLocation::~TraceLocation()
{
}

void TraceLocation::validate()
{
    // TODO: implement validation
}

web::json::value TraceLocation::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_TraceLocationTypeIsSet)
    {
        val[utility::conversions::to_string_t("traceLocationType")] = ModelBase::toJson(m_TraceLocationType);
    }
    if(m_GlobalIdIsSet)
    {
        val[utility::conversions::to_string_t("globalId")] = ModelBase::toJson(m_GlobalId);
    }
    if(m_PercentAlongIsSet)
    {
        val[utility::conversions::to_string_t("percentAlong")] = ModelBase::toJson(m_PercentAlong);
    }

    return val;
}

void TraceLocation::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("traceLocationType")))
    {
        setTraceLocationType(ModelBase::stringFromJson(val[utility::conversions::to_string_t("traceLocationType")]));
    }
    if(val.has_field(utility::conversions::to_string_t("globalId")))
    {
        setGlobalId(ModelBase::stringFromJson(val[utility::conversions::to_string_t("globalId")]));
    }
    if(val.has_field(utility::conversions::to_string_t("percentAlong")))
    {
        setPercentAlong(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("percentAlong")]));
    }
}

void TraceLocation::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_TraceLocationTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("traceLocationType"), m_TraceLocationType));
        
    }
    if(m_GlobalIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("globalId"), m_GlobalId));
        
    }
    if(m_PercentAlongIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("percentAlong"), m_PercentAlong));
    }
}

void TraceLocation::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("traceLocationType")))
    {
        setTraceLocationType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("traceLocationType"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("globalId")))
    {
        setGlobalId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("globalId"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("percentAlong")))
    {
        setPercentAlong(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("percentAlong"))));
    }
}

utility::string_t TraceLocation::getTraceLocationType() const
{
    return m_TraceLocationType;
}


void TraceLocation::setTraceLocationType(utility::string_t value)
{
    m_TraceLocationType = value;
    m_TraceLocationTypeIsSet = true;
}
bool TraceLocation::traceLocationTypeIsSet() const
{
    return m_TraceLocationTypeIsSet;
}

void TraceLocation::unsetTraceLocationType()
{
    m_TraceLocationTypeIsSet = false;
}

utility::string_t TraceLocation::getGlobalId() const
{
    return m_GlobalId;
}


void TraceLocation::setGlobalId(utility::string_t value)
{
    m_GlobalId = value;
    m_GlobalIdIsSet = true;
}
bool TraceLocation::globalIdIsSet() const
{
    return m_GlobalIdIsSet;
}

void TraceLocation::unsetGlobalId()
{
    m_GlobalIdIsSet = false;
}

double TraceLocation::getPercentAlong() const
{
    return m_PercentAlong;
}


void TraceLocation::setPercentAlong(double value)
{
    m_PercentAlong = value;
    m_PercentAlongIsSet = true;
}
bool TraceLocation::percentAlongIsSet() const
{
    return m_PercentAlongIsSet;
}

void TraceLocation::unsetPercentAlong()
{
    m_PercentAlongIsSet = false;
}

}
}
}
}

