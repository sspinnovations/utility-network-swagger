/**
 * Swagger for Utility Network
 * Open API Specification (OAS/Swagger)  * **trace**, **updateIsConnected** from the [ArcGIS Utility Network]( https://developers.arcgis.com/rest/services-reference/utility-network-service.htm) * **generateToken** from the [ArcGIS REST API](https://developers.arcgis.com/rest/)  Tested on ArcGIS  Enterprise 10.6.1 using [NSwagStudio](https://github.com/RSuter/NSwag/wiki/NSwagStudio) C# code gen . 
 *
 * OpenAPI spec version: 0.13
 * Contact: 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "TokenResponse_error.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

TokenResponse_error::TokenResponse_error()
{
    m_Code = 0.0;
    m_CodeIsSet = false;
    m_Message = utility::conversions::to_string_t("");
    m_MessageIsSet = false;
    m_DetailsIsSet = false;
}

TokenResponse_error::~TokenResponse_error()
{
}

void TokenResponse_error::validate()
{
    // TODO: implement validation
}

web::json::value TokenResponse_error::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_CodeIsSet)
    {
        val[utility::conversions::to_string_t("code")] = ModelBase::toJson(m_Code);
    }
    if(m_MessageIsSet)
    {
        val[utility::conversions::to_string_t("message")] = ModelBase::toJson(m_Message);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Details )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("details")] = web::json::value::array(jsonArray);
        }
    }

    return val;
}

void TokenResponse_error::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("code")))
    {
        setCode(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("code")]));
    }
    if(val.has_field(utility::conversions::to_string_t("message")))
    {
        setMessage(ModelBase::stringFromJson(val[utility::conversions::to_string_t("message")]));
    }
    {
        m_Details.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("details")))
        {
        for( auto& item : val[utility::conversions::to_string_t("details")].as_array() )
        {
            m_Details.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
}

void TokenResponse_error::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_CodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("code"), m_Code));
    }
    if(m_MessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("message"), m_Message));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Details )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("details"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
}

void TokenResponse_error::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("code")))
    {
        setCode(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("code"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("message")))
    {
        setMessage(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("message"))));
    }
    {
        m_Details.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("details")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("details"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Details.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
}

double TokenResponse_error::getCode() const
{
    return m_Code;
}


void TokenResponse_error::setCode(double value)
{
    m_Code = value;
    m_CodeIsSet = true;
}
bool TokenResponse_error::codeIsSet() const
{
    return m_CodeIsSet;
}

void TokenResponse_error::unsetCode()
{
    m_CodeIsSet = false;
}

utility::string_t TokenResponse_error::getMessage() const
{
    return m_Message;
}


void TokenResponse_error::setMessage(utility::string_t value)
{
    m_Message = value;
    m_MessageIsSet = true;
}
bool TokenResponse_error::messageIsSet() const
{
    return m_MessageIsSet;
}

void TokenResponse_error::unsetMessage()
{
    m_MessageIsSet = false;
}

std::vector<utility::string_t>& TokenResponse_error::getDetails()
{
    return m_Details;
}

void TokenResponse_error::setDetails(std::vector<utility::string_t> value)
{
    m_Details = value;
    m_DetailsIsSet = true;
}
bool TokenResponse_error::detailsIsSet() const
{
    return m_DetailsIsSet;
}

void TokenResponse_error::unsetDetails()
{
    m_DetailsIsSet = false;
}

}
}
}
}

