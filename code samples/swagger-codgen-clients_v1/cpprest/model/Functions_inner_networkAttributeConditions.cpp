/**
 * Swagger for Utility Network
 * Open API Specification (OAS/Swagger)  * **trace**, **updateIsConnected** from the [ArcGIS Utility Network]( https://developers.arcgis.com/rest/services-reference/utility-network-service.htm) * **generateToken** from the [ArcGIS REST API](https://developers.arcgis.com/rest/)  Tested on ArcGIS  Enterprise 10.6.1 using [NSwagStudio](https://github.com/RSuter/NSwag/wiki/NSwagStudio) C# code gen . 
 *
 * OpenAPI spec version: 0.13
 * Contact: 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Functions_inner_networkAttributeConditions.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Functions_inner_networkAttributeConditions::Functions_inner_networkAttributeConditions()
{
    m_NetworkAttributeName = utility::conversions::to_string_t("");
    m_NetworkAttributeNameIsSet = false;
    m__operator = utility::conversions::to_string_t("");
    m__operatorIsSet = false;
    m_Value = utility::conversions::to_string_t("");
    m_ValueIsSet = false;
    m_CombineUsingOr = false;
    m_CombineUsingOrIsSet = false;
    m_IsTypeSpecificValue = false;
    m_IsTypeSpecificValueIsSet = false;
}

Functions_inner_networkAttributeConditions::~Functions_inner_networkAttributeConditions()
{
}

void Functions_inner_networkAttributeConditions::validate()
{
    // TODO: implement validation
}

web::json::value Functions_inner_networkAttributeConditions::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_NetworkAttributeNameIsSet)
    {
        val[utility::conversions::to_string_t("networkAttributeName")] = ModelBase::toJson(m_NetworkAttributeName);
    }
    if(m__operatorIsSet)
    {
        val[utility::conversions::to_string_t("operator")] = ModelBase::toJson(m__operator);
    }
    if(m_ValueIsSet)
    {
        val[utility::conversions::to_string_t("value")] = ModelBase::toJson(m_Value);
    }
    if(m_CombineUsingOrIsSet)
    {
        val[utility::conversions::to_string_t("combineUsingOr")] = ModelBase::toJson(m_CombineUsingOr);
    }
    if(m_IsTypeSpecificValueIsSet)
    {
        val[utility::conversions::to_string_t("isTypeSpecificValue")] = ModelBase::toJson(m_IsTypeSpecificValue);
    }

    return val;
}

void Functions_inner_networkAttributeConditions::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("networkAttributeName")))
    {
        setNetworkAttributeName(ModelBase::stringFromJson(val[utility::conversions::to_string_t("networkAttributeName")]));
    }
    if(val.has_field(utility::conversions::to_string_t("operator")))
    {
        setOperator(ModelBase::stringFromJson(val[utility::conversions::to_string_t("operator")]));
    }
    if(val.has_field(utility::conversions::to_string_t("value")))
    {
        setValue(ModelBase::stringFromJson(val[utility::conversions::to_string_t("value")]));
    }
    if(val.has_field(utility::conversions::to_string_t("combineUsingOr")))
    {
        setCombineUsingOr(ModelBase::boolFromJson(val[utility::conversions::to_string_t("combineUsingOr")]));
    }
    if(val.has_field(utility::conversions::to_string_t("isTypeSpecificValue")))
    {
        setIsTypeSpecificValue(ModelBase::boolFromJson(val[utility::conversions::to_string_t("isTypeSpecificValue")]));
    }
}

void Functions_inner_networkAttributeConditions::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_NetworkAttributeNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("networkAttributeName"), m_NetworkAttributeName));
        
    }
    if(m__operatorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("operator"), m__operator));
        
    }
    if(m_ValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("value"), m_Value));
        
    }
    if(m_CombineUsingOrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("combineUsingOr"), m_CombineUsingOr));
    }
    if(m_IsTypeSpecificValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isTypeSpecificValue"), m_IsTypeSpecificValue));
    }
}

void Functions_inner_networkAttributeConditions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("networkAttributeName")))
    {
        setNetworkAttributeName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("networkAttributeName"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("operator")))
    {
        setOperator(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("operator"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("value")))
    {
        setValue(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("value"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("combineUsingOr")))
    {
        setCombineUsingOr(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("combineUsingOr"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isTypeSpecificValue")))
    {
        setIsTypeSpecificValue(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("isTypeSpecificValue"))));
    }
}

utility::string_t Functions_inner_networkAttributeConditions::getNetworkAttributeName() const
{
    return m_NetworkAttributeName;
}


void Functions_inner_networkAttributeConditions::setNetworkAttributeName(utility::string_t value)
{
    m_NetworkAttributeName = value;
    m_NetworkAttributeNameIsSet = true;
}
bool Functions_inner_networkAttributeConditions::networkAttributeNameIsSet() const
{
    return m_NetworkAttributeNameIsSet;
}

void Functions_inner_networkAttributeConditions::unsetNetworkAttributeName()
{
    m_NetworkAttributeNameIsSet = false;
}

utility::string_t Functions_inner_networkAttributeConditions::getOperator() const
{
    return m__operator;
}


void Functions_inner_networkAttributeConditions::setOperator(utility::string_t value)
{
    m__operator = value;
    m__operatorIsSet = true;
}
bool Functions_inner_networkAttributeConditions::operatorIsSet() const
{
    return m__operatorIsSet;
}

void Functions_inner_networkAttributeConditions::unset_operator()
{
    m__operatorIsSet = false;
}

utility::string_t Functions_inner_networkAttributeConditions::getValue() const
{
    return m_Value;
}


void Functions_inner_networkAttributeConditions::setValue(utility::string_t value)
{
    m_Value = value;
    m_ValueIsSet = true;
}
bool Functions_inner_networkAttributeConditions::valueIsSet() const
{
    return m_ValueIsSet;
}

void Functions_inner_networkAttributeConditions::unsetValue()
{
    m_ValueIsSet = false;
}

bool Functions_inner_networkAttributeConditions::isCombineUsingOr() const
{
    return m_CombineUsingOr;
}


void Functions_inner_networkAttributeConditions::setCombineUsingOr(bool value)
{
    m_CombineUsingOr = value;
    m_CombineUsingOrIsSet = true;
}
bool Functions_inner_networkAttributeConditions::combineUsingOrIsSet() const
{
    return m_CombineUsingOrIsSet;
}

void Functions_inner_networkAttributeConditions::unsetCombineUsingOr()
{
    m_CombineUsingOrIsSet = false;
}

bool Functions_inner_networkAttributeConditions::isIsTypeSpecificValue() const
{
    return m_IsTypeSpecificValue;
}


void Functions_inner_networkAttributeConditions::setIsTypeSpecificValue(bool value)
{
    m_IsTypeSpecificValue = value;
    m_IsTypeSpecificValueIsSet = true;
}
bool Functions_inner_networkAttributeConditions::isTypeSpecificValueIsSet() const
{
    return m_IsTypeSpecificValueIsSet;
}

void Functions_inner_networkAttributeConditions::unsetIsTypeSpecificValue()
{
    m_IsTypeSpecificValueIsSet = false;
}

}
}
}
}

