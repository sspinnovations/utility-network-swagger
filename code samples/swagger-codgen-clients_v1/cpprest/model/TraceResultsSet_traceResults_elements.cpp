/**
 * Swagger for Utility Network
 * Open API Specification (OAS/Swagger)  * **trace**, **updateIsConnected** from the [ArcGIS Utility Network]( https://developers.arcgis.com/rest/services-reference/utility-network-service.htm) * **generateToken** from the [ArcGIS REST API](https://developers.arcgis.com/rest/)  Tested on ArcGIS  Enterprise 10.6.1 using [NSwagStudio](https://github.com/RSuter/NSwag/wiki/NSwagStudio) C# code gen . 
 *
 * OpenAPI spec version: 0.13
 * Contact: 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "TraceResultsSet_traceResults_elements.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

TraceResultsSet_traceResults_elements::TraceResultsSet_traceResults_elements()
{
    m_NetworkSourceId = 0.0;
    m_NetworkSourceIdIsSet = false;
    m_GlobalId = utility::conversions::to_string_t("");
    m_GlobalIdIsSet = false;
    m_ObjectId = 0.0;
    m_ObjectIdIsSet = false;
    m_TerminalId = 0.0;
    m_TerminalIdIsSet = false;
    m_AssetGroupCode = 0.0;
    m_AssetGroupCodeIsSet = false;
    m_AssetTypeCode = 0.0;
    m_AssetTypeCodeIsSet = false;
}

TraceResultsSet_traceResults_elements::~TraceResultsSet_traceResults_elements()
{
}

void TraceResultsSet_traceResults_elements::validate()
{
    // TODO: implement validation
}

web::json::value TraceResultsSet_traceResults_elements::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_NetworkSourceIdIsSet)
    {
        val[utility::conversions::to_string_t("networkSourceId")] = ModelBase::toJson(m_NetworkSourceId);
    }
    if(m_GlobalIdIsSet)
    {
        val[utility::conversions::to_string_t("globalId")] = ModelBase::toJson(m_GlobalId);
    }
    if(m_ObjectIdIsSet)
    {
        val[utility::conversions::to_string_t("objectId")] = ModelBase::toJson(m_ObjectId);
    }
    if(m_TerminalIdIsSet)
    {
        val[utility::conversions::to_string_t("terminalId")] = ModelBase::toJson(m_TerminalId);
    }
    if(m_AssetGroupCodeIsSet)
    {
        val[utility::conversions::to_string_t("assetGroupCode")] = ModelBase::toJson(m_AssetGroupCode);
    }
    if(m_AssetTypeCodeIsSet)
    {
        val[utility::conversions::to_string_t("assetTypeCode")] = ModelBase::toJson(m_AssetTypeCode);
    }

    return val;
}

void TraceResultsSet_traceResults_elements::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("networkSourceId")))
    {
        setNetworkSourceId(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("networkSourceId")]));
    }
    if(val.has_field(utility::conversions::to_string_t("globalId")))
    {
        setGlobalId(ModelBase::stringFromJson(val[utility::conversions::to_string_t("globalId")]));
    }
    if(val.has_field(utility::conversions::to_string_t("objectId")))
    {
        setObjectId(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("objectId")]));
    }
    if(val.has_field(utility::conversions::to_string_t("terminalId")))
    {
        setTerminalId(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("terminalId")]));
    }
    if(val.has_field(utility::conversions::to_string_t("assetGroupCode")))
    {
        setAssetGroupCode(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("assetGroupCode")]));
    }
    if(val.has_field(utility::conversions::to_string_t("assetTypeCode")))
    {
        setAssetTypeCode(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("assetTypeCode")]));
    }
}

void TraceResultsSet_traceResults_elements::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_NetworkSourceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("networkSourceId"), m_NetworkSourceId));
    }
    if(m_GlobalIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("globalId"), m_GlobalId));
        
    }
    if(m_ObjectIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("objectId"), m_ObjectId));
    }
    if(m_TerminalIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("terminalId"), m_TerminalId));
    }
    if(m_AssetGroupCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("assetGroupCode"), m_AssetGroupCode));
    }
    if(m_AssetTypeCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("assetTypeCode"), m_AssetTypeCode));
    }
}

void TraceResultsSet_traceResults_elements::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("networkSourceId")))
    {
        setNetworkSourceId(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("networkSourceId"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("globalId")))
    {
        setGlobalId(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("globalId"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("objectId")))
    {
        setObjectId(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("objectId"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("terminalId")))
    {
        setTerminalId(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("terminalId"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("assetGroupCode")))
    {
        setAssetGroupCode(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("assetGroupCode"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("assetTypeCode")))
    {
        setAssetTypeCode(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("assetTypeCode"))));
    }
}

double TraceResultsSet_traceResults_elements::getNetworkSourceId() const
{
    return m_NetworkSourceId;
}


void TraceResultsSet_traceResults_elements::setNetworkSourceId(double value)
{
    m_NetworkSourceId = value;
    m_NetworkSourceIdIsSet = true;
}
bool TraceResultsSet_traceResults_elements::networkSourceIdIsSet() const
{
    return m_NetworkSourceIdIsSet;
}

void TraceResultsSet_traceResults_elements::unsetNetworkSourceId()
{
    m_NetworkSourceIdIsSet = false;
}

utility::string_t TraceResultsSet_traceResults_elements::getGlobalId() const
{
    return m_GlobalId;
}


void TraceResultsSet_traceResults_elements::setGlobalId(utility::string_t value)
{
    m_GlobalId = value;
    m_GlobalIdIsSet = true;
}
bool TraceResultsSet_traceResults_elements::globalIdIsSet() const
{
    return m_GlobalIdIsSet;
}

void TraceResultsSet_traceResults_elements::unsetGlobalId()
{
    m_GlobalIdIsSet = false;
}

double TraceResultsSet_traceResults_elements::getObjectId() const
{
    return m_ObjectId;
}


void TraceResultsSet_traceResults_elements::setObjectId(double value)
{
    m_ObjectId = value;
    m_ObjectIdIsSet = true;
}
bool TraceResultsSet_traceResults_elements::objectIdIsSet() const
{
    return m_ObjectIdIsSet;
}

void TraceResultsSet_traceResults_elements::unsetObjectId()
{
    m_ObjectIdIsSet = false;
}

double TraceResultsSet_traceResults_elements::getTerminalId() const
{
    return m_TerminalId;
}


void TraceResultsSet_traceResults_elements::setTerminalId(double value)
{
    m_TerminalId = value;
    m_TerminalIdIsSet = true;
}
bool TraceResultsSet_traceResults_elements::terminalIdIsSet() const
{
    return m_TerminalIdIsSet;
}

void TraceResultsSet_traceResults_elements::unsetTerminalId()
{
    m_TerminalIdIsSet = false;
}

double TraceResultsSet_traceResults_elements::getAssetGroupCode() const
{
    return m_AssetGroupCode;
}


void TraceResultsSet_traceResults_elements::setAssetGroupCode(double value)
{
    m_AssetGroupCode = value;
    m_AssetGroupCodeIsSet = true;
}
bool TraceResultsSet_traceResults_elements::assetGroupCodeIsSet() const
{
    return m_AssetGroupCodeIsSet;
}

void TraceResultsSet_traceResults_elements::unsetAssetGroupCode()
{
    m_AssetGroupCodeIsSet = false;
}

double TraceResultsSet_traceResults_elements::getAssetTypeCode() const
{
    return m_AssetTypeCode;
}


void TraceResultsSet_traceResults_elements::setAssetTypeCode(double value)
{
    m_AssetTypeCode = value;
    m_AssetTypeCodeIsSet = true;
}
bool TraceResultsSet_traceResults_elements::assetTypeCodeIsSet() const
{
    return m_AssetTypeCodeIsSet;
}

void TraceResultsSet_traceResults_elements::unsetAssetTypeCode()
{
    m_AssetTypeCodeIsSet = false;
}

}
}
}
}

