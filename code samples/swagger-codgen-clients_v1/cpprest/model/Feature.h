/**
 * Swagger for Utility Network
 * Open API Specification (OAS/Swagger)  * **trace**, **updateIsConnected** from the [ArcGIS Utility Network]( https://developers.arcgis.com/rest/services-reference/utility-network-service.htm) * **generateToken** from the [ArcGIS REST API](https://developers.arcgis.com/rest/)  Tested on ArcGIS  Enterprise 10.6.1 using [NSwagStudio](https://github.com/RSuter/NSwag/wiki/NSwagStudio) C# code gen . 
 *
 * OpenAPI spec version: 0.13
 * Contact: 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * Feature.h
 *
 * 
 */

#ifndef IO_SWAGGER_CLIENT_MODEL_Feature_H_
#define IO_SWAGGER_CLIENT_MODEL_Feature_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  Feature
    : public ModelBase
{
public:
    Feature();
    virtual ~Feature();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Feature members

    /// <summary>
    /// networkSourceId
    /// </summary>
    utility::string_t getNetworkSourceId() const;
    bool networkSourceIdIsSet() const;
    void unsetNetworkSourceId();
    void setNetworkSourceId(utility::string_t value);
    /// <summary>
    /// guid
    /// </summary>
    utility::string_t getGlobalId() const;
    bool globalIdIsSet() const;
    void unsetGlobalId();
    void setGlobalId(utility::string_t value);
    /// <summary>
    /// objectId
    /// </summary>
    double getObjectId() const;
    bool objectIdIsSet() const;
    void unsetObjectId();
    void setObjectId(double value);
    /// <summary>
    /// terminalId
    /// </summary>
    double getTerminalId() const;
    bool terminalIdIsSet() const;
    void unsetTerminalId();
    void setTerminalId(double value);
    /// <summary>
    /// 
    /// </summary>
    std::vector<double>& getNetworkAttributes();
    bool networkAttributesIsSet() const;
    void unsetNetworkAttributes();
    void setNetworkAttributes(std::vector<double> value);
    /// <summary>
    /// assetGroup
    /// </summary>
    double getAssetGroup() const;
    bool assetGroupIsSet() const;
    void unsetAssetGroup();
    void setAssetGroup(double value);
    /// <summary>
    /// assetType
    /// </summary>
    double getAssetType() const;
    bool assetTypeIsSet() const;
    void unsetAssetType();
    void setAssetType(double value);

protected:
    utility::string_t m_NetworkSourceId;
    bool m_NetworkSourceIdIsSet;
    utility::string_t m_GlobalId;
    bool m_GlobalIdIsSet;
    double m_ObjectId;
    bool m_ObjectIdIsSet;
    double m_TerminalId;
    bool m_TerminalIdIsSet;
    std::vector<double> m_NetworkAttributes;
    bool m_NetworkAttributesIsSet;
    double m_AssetGroup;
    bool m_AssetGroupIsSet;
    double m_AssetType;
    bool m_AssetTypeIsSet;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_MODEL_Feature_H_ */
