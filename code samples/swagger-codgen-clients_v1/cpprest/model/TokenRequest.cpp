/**
 * Swagger for Utility Network
 * Open API Specification (OAS/Swagger)  * **trace**, **updateIsConnected** from the [ArcGIS Utility Network]( https://developers.arcgis.com/rest/services-reference/utility-network-service.htm) * **generateToken** from the [ArcGIS REST API](https://developers.arcgis.com/rest/)  Tested on ArcGIS  Enterprise 10.6.1 using [NSwagStudio](https://github.com/RSuter/NSwag/wiki/NSwagStudio) C# code gen . 
 *
 * OpenAPI spec version: 0.13
 * Contact: 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "TokenRequest.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

TokenRequest::TokenRequest()
{
    m_Username = utility::conversions::to_string_t("");
    m_Password = utility::conversions::to_string_t("");
    m_Ip = utility::conversions::to_string_t("");
    m_IpIsSet = false;
    m_Referer = utility::conversions::to_string_t("");
    m_RefererIsSet = false;
    m_Expiration = 0.0;
    m_f = utility::conversions::to_string_t("");
}

TokenRequest::~TokenRequest()
{
}

void TokenRequest::validate()
{
    // TODO: implement validation
}

web::json::value TokenRequest::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("username")] = ModelBase::toJson(m_Username);
    val[utility::conversions::to_string_t("password")] = ModelBase::toJson(m_Password);
    if(m_IpIsSet)
    {
        val[utility::conversions::to_string_t("ip")] = ModelBase::toJson(m_Ip);
    }
    if(m_RefererIsSet)
    {
        val[utility::conversions::to_string_t("referer")] = ModelBase::toJson(m_Referer);
    }
    val[utility::conversions::to_string_t("expiration")] = ModelBase::toJson(m_Expiration);
    val[utility::conversions::to_string_t("f")] = ModelBase::toJson(m_f);

    return val;
}

void TokenRequest::fromJson(web::json::value& val)
{
    setUsername(ModelBase::stringFromJson(val[utility::conversions::to_string_t("username")]));
    setPassword(ModelBase::stringFromJson(val[utility::conversions::to_string_t("password")]));
    if(val.has_field(utility::conversions::to_string_t("ip")))
    {
        setIp(ModelBase::stringFromJson(val[utility::conversions::to_string_t("ip")]));
    }
    if(val.has_field(utility::conversions::to_string_t("referer")))
    {
        setReferer(ModelBase::stringFromJson(val[utility::conversions::to_string_t("referer")]));
    }
    setExpiration(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("expiration")]));
    setF(ModelBase::stringFromJson(val[utility::conversions::to_string_t("f")]));
}

void TokenRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("username"), m_Username));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("password"), m_Password));
    if(m_IpIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ip"), m_Ip));
        
    }
    if(m_RefererIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("referer"), m_Referer));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("expiration"), m_Expiration));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("f"), m_f));
}

void TokenRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setUsername(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("username"))));
    setPassword(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("password"))));
    if(multipart->hasContent(utility::conversions::to_string_t("ip")))
    {
        setIp(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("ip"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("referer")))
    {
        setReferer(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("referer"))));
    }
    setExpiration(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("expiration"))));
    setF(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("f"))));
}

utility::string_t TokenRequest::getUsername() const
{
    return m_Username;
}


void TokenRequest::setUsername(utility::string_t value)
{
    m_Username = value;
    
}
utility::string_t TokenRequest::getPassword() const
{
    return m_Password;
}


void TokenRequest::setPassword(utility::string_t value)
{
    m_Password = value;
    
}
utility::string_t TokenRequest::getIp() const
{
    return m_Ip;
}


void TokenRequest::setIp(utility::string_t value)
{
    m_Ip = value;
    m_IpIsSet = true;
}
bool TokenRequest::ipIsSet() const
{
    return m_IpIsSet;
}

void TokenRequest::unsetIp()
{
    m_IpIsSet = false;
}

utility::string_t TokenRequest::getReferer() const
{
    return m_Referer;
}


void TokenRequest::setReferer(utility::string_t value)
{
    m_Referer = value;
    m_RefererIsSet = true;
}
bool TokenRequest::refererIsSet() const
{
    return m_RefererIsSet;
}

void TokenRequest::unsetReferer()
{
    m_RefererIsSet = false;
}

double TokenRequest::getExpiration() const
{
    return m_Expiration;
}


void TokenRequest::setExpiration(double value)
{
    m_Expiration = value;
    
}
utility::string_t TokenRequest::getF() const
{
    return m_f;
}


void TokenRequest::setF(utility::string_t value)
{
    m_f = value;
    
}
}
}
}
}

