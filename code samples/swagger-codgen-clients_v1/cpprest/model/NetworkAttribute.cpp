/**
 * Swagger for Utility Network
 * Open API Specification (OAS/Swagger)  * **trace**, **updateIsConnected** from the [ArcGIS Utility Network]( https://developers.arcgis.com/rest/services-reference/utility-network-service.htm) * **generateToken** from the [ArcGIS REST API](https://developers.arcgis.com/rest/)  Tested on ArcGIS  Enterprise 10.6.1 using [NSwagStudio](https://github.com/RSuter/NSwag/wiki/NSwagStudio) C# code gen . 
 *
 * OpenAPI spec version: 0.13
 * Contact: 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "NetworkAttribute.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

NetworkAttribute::NetworkAttribute()
{
    m_NetworkAttribute = 0.0;
    m_NetworkAttributeIsSet = false;
}

NetworkAttribute::~NetworkAttribute()
{
}

void NetworkAttribute::validate()
{
    // TODO: implement validation
}

web::json::value NetworkAttribute::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_NetworkAttributeIsSet)
    {
        val[utility::conversions::to_string_t("networkAttribute")] = ModelBase::toJson(m_NetworkAttribute);
    }

    return val;
}

void NetworkAttribute::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("networkAttribute")))
    {
        setNetworkAttribute(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("networkAttribute")]));
    }
}

void NetworkAttribute::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_NetworkAttributeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("networkAttribute"), m_NetworkAttribute));
    }
}

void NetworkAttribute::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("networkAttribute")))
    {
        setNetworkAttribute(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("networkAttribute"))));
    }
}

double NetworkAttribute::getNetworkAttribute() const
{
    return m_NetworkAttribute;
}


void NetworkAttribute::setNetworkAttribute(double value)
{
    m_NetworkAttribute = value;
    m_NetworkAttributeIsSet = true;
}
bool NetworkAttribute::networkAttributeIsSet() const
{
    return m_NetworkAttributeIsSet;
}

void NetworkAttribute::unsetNetworkAttribute()
{
    m_NetworkAttributeIsSet = false;
}

}
}
}
}

