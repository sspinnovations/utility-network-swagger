/**
 * Swagger for Utility Network
 * Open API Specification (OAS/Swagger)  * **trace**, **updateIsConnected** from the [ArcGIS Utility Network]( https://developers.arcgis.com/rest/services-reference/utility-network-service.htm) * **generateToken** from the [ArcGIS REST API](https://developers.arcgis.com/rest/)  Tested on ArcGIS  Enterprise 10.6.1 using [NSwagStudio](https://github.com/RSuter/NSwag/wiki/NSwagStudio) C# code gen . 
 *
 * OpenAPI spec version: 0.13
 * Contact: 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Functions_inner.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Functions_inner::Functions_inner()
{
    m_FunctionType = utility::conversions::to_string_t("");
    m_NetworkAttributeName = utility::conversions::to_string_t("");
    m_NetworkAttributeConditionsIsSet = false;
}

Functions_inner::~Functions_inner()
{
}

void Functions_inner::validate()
{
    // TODO: implement validation
}

web::json::value Functions_inner::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("functionType")] = ModelBase::toJson(m_FunctionType);
    val[utility::conversions::to_string_t("networkAttributeName")] = ModelBase::toJson(m_NetworkAttributeName);
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_NetworkAttributeConditions )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("networkAttributeConditions")] = web::json::value::array(jsonArray);
        }
    }

    return val;
}

void Functions_inner::fromJson(web::json::value& val)
{
    setFunctionType(ModelBase::stringFromJson(val[utility::conversions::to_string_t("functionType")]));
    setNetworkAttributeName(ModelBase::stringFromJson(val[utility::conversions::to_string_t("networkAttributeName")]));
    {
        m_NetworkAttributeConditions.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("networkAttributeConditions")))
        {
        for( auto& item : val[utility::conversions::to_string_t("networkAttributeConditions")].as_array() )
        {
            if(item.is_null())
            {
                m_NetworkAttributeConditions.push_back( std::shared_ptr<Functions_inner_networkAttributeConditions>(nullptr) );
            }
            else
            {
                std::shared_ptr<Functions_inner_networkAttributeConditions> newItem(new Functions_inner_networkAttributeConditions());
                newItem->fromJson(item);
                m_NetworkAttributeConditions.push_back( newItem );
            }
        }
        }
    }
}

void Functions_inner::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("functionType"), m_FunctionType));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("networkAttributeName"), m_NetworkAttributeName));
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_NetworkAttributeConditions )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("networkAttributeConditions"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
}

void Functions_inner::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setFunctionType(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("functionType"))));
    setNetworkAttributeName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("networkAttributeName"))));
    {
        m_NetworkAttributeConditions.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("networkAttributeConditions")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("networkAttributeConditions"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_NetworkAttributeConditions.push_back( std::shared_ptr<Functions_inner_networkAttributeConditions>(nullptr) );
            }
            else
            {
                std::shared_ptr<Functions_inner_networkAttributeConditions> newItem(new Functions_inner_networkAttributeConditions());
                newItem->fromJson(item);
                m_NetworkAttributeConditions.push_back( newItem );
            }
        }
        }
    }
}

utility::string_t Functions_inner::getFunctionType() const
{
    return m_FunctionType;
}


void Functions_inner::setFunctionType(utility::string_t value)
{
    m_FunctionType = value;
    
}
utility::string_t Functions_inner::getNetworkAttributeName() const
{
    return m_NetworkAttributeName;
}


void Functions_inner::setNetworkAttributeName(utility::string_t value)
{
    m_NetworkAttributeName = value;
    
}
std::vector<std::shared_ptr<Functions_inner_networkAttributeConditions>>& Functions_inner::getNetworkAttributeConditions()
{
    return m_NetworkAttributeConditions;
}

void Functions_inner::setNetworkAttributeConditions(std::vector<std::shared_ptr<Functions_inner_networkAttributeConditions>> value)
{
    m_NetworkAttributeConditions = value;
    m_NetworkAttributeConditionsIsSet = true;
}
bool Functions_inner::networkAttributeConditionsIsSet() const
{
    return m_NetworkAttributeConditionsIsSet;
}

void Functions_inner::unsetNetworkAttributeConditions()
{
    m_NetworkAttributeConditionsIsSet = false;
}

}
}
}
}

