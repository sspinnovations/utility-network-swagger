/**
 * Swagger for Utility Network
 * Open API Specification (OAS/Swagger)  * **trace**, **updateIsConnected** from the [ArcGIS Utility Network]( https://developers.arcgis.com/rest/services-reference/utility-network-service.htm) * **generateToken** from the [ArcGIS REST API](https://developers.arcgis.com/rest/)  Tested on ArcGIS  Enterprise 10.6.1 using [NSwagStudio](https://github.com/RSuter/NSwag/wiki/NSwagStudio) C# code gen . 
 *
 * OpenAPI spec version: 0.13
 * Contact: 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * TraceResultsSet_traceResults.h
 *
 * 
 */

#ifndef IO_SWAGGER_CLIENT_MODEL_TraceResultsSet_traceResults_H_
#define IO_SWAGGER_CLIENT_MODEL_TraceResultsSet_traceResults_H_


#include "../ModelBase.h"

#include "TraceResultsSet_traceResults_elements.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  TraceResultsSet_traceResults
    : public ModelBase
{
public:
    TraceResultsSet_traceResults();
    virtual ~TraceResultsSet_traceResults();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// TraceResultsSet_traceResults members

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<TraceResultsSet_traceResults_elements>>& getElements();
    bool elementsIsSet() const;
    void unsetElements();
    void setElements(std::vector<std::shared_ptr<TraceResultsSet_traceResults_elements>> value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDiagramName() const;
    bool diagramNameIsSet() const;
    void unsetDiagramName();
    void setDiagramName(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getGlobalFunctionResults();
    bool globalFunctionResultsIsSet() const;
    void unsetGlobalFunctionResults();
    void setGlobalFunctionResults(std::vector<utility::string_t> value);
    /// <summary>
    /// 
    /// </summary>
    bool isKFeaturesForKNNFound() const;
    bool kFeaturesForKNNFoundIsSet() const;
    void unsetKFeaturesForKNNFound();
    void setKFeaturesForKNNFound(bool value);
    /// <summary>
    /// 
    /// </summary>
    bool isStartingPointsIgnored() const;
    bool startingPointsIgnoredIsSet() const;
    void unsetStartingPointsIgnored();
    void setStartingPointsIgnored(bool value);
    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getWarnings();
    bool warningsIsSet() const;
    void unsetWarnings();
    void setWarnings(std::vector<utility::string_t> value);

protected:
    std::vector<std::shared_ptr<TraceResultsSet_traceResults_elements>> m_Elements;
    bool m_ElementsIsSet;
    utility::string_t m_DiagramName;
    bool m_DiagramNameIsSet;
    std::vector<utility::string_t> m_GlobalFunctionResults;
    bool m_GlobalFunctionResultsIsSet;
    bool m_KFeaturesForKNNFound;
    bool m_KFeaturesForKNNFoundIsSet;
    bool m_StartingPointsIgnored;
    bool m_StartingPointsIgnoredIsSet;
    std::vector<utility::string_t> m_Warnings;
    bool m_WarningsIsSet;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_MODEL_TraceResultsSet_traceResults_H_ */
