/**
 * Swagger for Utility Network
 * Open API Specification (OAS/Swagger)  * **trace**, **updateIsConnected** from the [ArcGIS Utility Network]( https://developers.arcgis.com/rest/services-reference/utility-network-service.htm) * **generateToken** from the [ArcGIS REST API](https://developers.arcgis.com/rest/)  Tested on ArcGIS  Enterprise 10.6.1 using [NSwagStudio](https://github.com/RSuter/NSwag/wiki/NSwagStudio) C# code gen . 
 *
 * OpenAPI spec version: 0.13
 * Contact: 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "UpdateIsConnectedResponse.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

UpdateIsConnectedResponse::UpdateIsConnectedResponse()
{
    m_Moment = 0.0;
    m_MomentIsSet = false;
    m_Success = utility::conversions::to_string_t("");
    m_SuccessIsSet = false;
    m_ErrorIsSet = false;
}

UpdateIsConnectedResponse::~UpdateIsConnectedResponse()
{
}

void UpdateIsConnectedResponse::validate()
{
    // TODO: implement validation
}

web::json::value UpdateIsConnectedResponse::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_MomentIsSet)
    {
        val[utility::conversions::to_string_t("moment")] = ModelBase::toJson(m_Moment);
    }
    if(m_SuccessIsSet)
    {
        val[utility::conversions::to_string_t("success")] = ModelBase::toJson(m_Success);
    }
    if(m_ErrorIsSet)
    {
        val[utility::conversions::to_string_t("error")] = ModelBase::toJson(m_Error);
    }

    return val;
}

void UpdateIsConnectedResponse::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("moment")))
    {
        setMoment(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("moment")]));
    }
    if(val.has_field(utility::conversions::to_string_t("success")))
    {
        setSuccess(ModelBase::stringFromJson(val[utility::conversions::to_string_t("success")]));
    }
    if(val.has_field(utility::conversions::to_string_t("error")))
    {
        if(!val[utility::conversions::to_string_t("error")].is_null())
        {
            std::shared_ptr<TokenResponse_error> newItem(new TokenResponse_error());
            newItem->fromJson(val[utility::conversions::to_string_t("error")]);
            setError( newItem );
        }
    }
}

void UpdateIsConnectedResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_MomentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("moment"), m_Moment));
    }
    if(m_SuccessIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("success"), m_Success));
        
    }
    if(m_ErrorIsSet)
    {
        if (m_Error.get())
        {
            m_Error->toMultipart(multipart, utility::conversions::to_string_t("error."));
        }
        
    }
}

void UpdateIsConnectedResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("moment")))
    {
        setMoment(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("moment"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("success")))
    {
        setSuccess(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("success"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("error")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("error")))
        {
            std::shared_ptr<TokenResponse_error> newItem(new TokenResponse_error());
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("error."));
            setError( newItem );
        }
    }
}

double UpdateIsConnectedResponse::getMoment() const
{
    return m_Moment;
}


void UpdateIsConnectedResponse::setMoment(double value)
{
    m_Moment = value;
    m_MomentIsSet = true;
}
bool UpdateIsConnectedResponse::momentIsSet() const
{
    return m_MomentIsSet;
}

void UpdateIsConnectedResponse::unsetMoment()
{
    m_MomentIsSet = false;
}

utility::string_t UpdateIsConnectedResponse::getSuccess() const
{
    return m_Success;
}


void UpdateIsConnectedResponse::setSuccess(utility::string_t value)
{
    m_Success = value;
    m_SuccessIsSet = true;
}
bool UpdateIsConnectedResponse::successIsSet() const
{
    return m_SuccessIsSet;
}

void UpdateIsConnectedResponse::unsetSuccess()
{
    m_SuccessIsSet = false;
}

std::shared_ptr<TokenResponse_error> UpdateIsConnectedResponse::getError() const
{
    return m_Error;
}


void UpdateIsConnectedResponse::setError(std::shared_ptr<TokenResponse_error> value)
{
    m_Error = value;
    m_ErrorIsSet = true;
}
bool UpdateIsConnectedResponse::errorIsSet() const
{
    return m_ErrorIsSet;
}

void UpdateIsConnectedResponse::unsetError()
{
    m_ErrorIsSet = false;
}

}
}
}
}

