/**
 * Swagger for Utility Network
 * Open API Specification (OAS/Swagger)  * **trace**, **updateIsConnected** from the [ArcGIS Utility Network]( https://developers.arcgis.com/rest/services-reference/utility-network-service.htm) * **generateToken** from the [ArcGIS REST API](https://developers.arcgis.com/rest/)  Tested on ArcGIS  Enterprise 10.6.1 using [NSwagStudio](https://github.com/RSuter/NSwag/wiki/NSwagStudio) C# code gen . 
 *
 * OpenAPI spec version: 0.13
 * Contact: 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "TraceResultsSet_traceResults.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

TraceResultsSet_traceResults::TraceResultsSet_traceResults()
{
    m_ElementsIsSet = false;
    m_DiagramName = utility::conversions::to_string_t("");
    m_DiagramNameIsSet = false;
    m_GlobalFunctionResultsIsSet = false;
    m_KFeaturesForKNNFound = false;
    m_KFeaturesForKNNFoundIsSet = false;
    m_StartingPointsIgnored = false;
    m_StartingPointsIgnoredIsSet = false;
    m_WarningsIsSet = false;
}

TraceResultsSet_traceResults::~TraceResultsSet_traceResults()
{
}

void TraceResultsSet_traceResults::validate()
{
    // TODO: implement validation
}

web::json::value TraceResultsSet_traceResults::toJson() const
{
    web::json::value val = web::json::value::object();

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Elements )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("elements")] = web::json::value::array(jsonArray);
        }
    }
    if(m_DiagramNameIsSet)
    {
        val[utility::conversions::to_string_t("diagramName")] = ModelBase::toJson(m_DiagramName);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_GlobalFunctionResults )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("globalFunctionResults")] = web::json::value::array(jsonArray);
        }
    }
    if(m_KFeaturesForKNNFoundIsSet)
    {
        val[utility::conversions::to_string_t("kFeaturesForKNNFound")] = ModelBase::toJson(m_KFeaturesForKNNFound);
    }
    if(m_StartingPointsIgnoredIsSet)
    {
        val[utility::conversions::to_string_t("startingPointsIgnored")] = ModelBase::toJson(m_StartingPointsIgnored);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Warnings )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("warnings")] = web::json::value::array(jsonArray);
        }
    }

    return val;
}

void TraceResultsSet_traceResults::fromJson(web::json::value& val)
{
    {
        m_Elements.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("elements")))
        {
        for( auto& item : val[utility::conversions::to_string_t("elements")].as_array() )
        {
            if(item.is_null())
            {
                m_Elements.push_back( std::shared_ptr<TraceResultsSet_traceResults_elements>(nullptr) );
            }
            else
            {
                std::shared_ptr<TraceResultsSet_traceResults_elements> newItem(new TraceResultsSet_traceResults_elements());
                newItem->fromJson(item);
                m_Elements.push_back( newItem );
            }
        }
        }
    }
    if(val.has_field(utility::conversions::to_string_t("diagramName")))
    {
        setDiagramName(ModelBase::stringFromJson(val[utility::conversions::to_string_t("diagramName")]));
    }
    {
        m_GlobalFunctionResults.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("globalFunctionResults")))
        {
        for( auto& item : val[utility::conversions::to_string_t("globalFunctionResults")].as_array() )
        {
            m_GlobalFunctionResults.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(val.has_field(utility::conversions::to_string_t("kFeaturesForKNNFound")))
    {
        setKFeaturesForKNNFound(ModelBase::boolFromJson(val[utility::conversions::to_string_t("kFeaturesForKNNFound")]));
    }
    if(val.has_field(utility::conversions::to_string_t("startingPointsIgnored")))
    {
        setStartingPointsIgnored(ModelBase::boolFromJson(val[utility::conversions::to_string_t("startingPointsIgnored")]));
    }
    {
        m_Warnings.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("warnings")))
        {
        for( auto& item : val[utility::conversions::to_string_t("warnings")].as_array() )
        {
            m_Warnings.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
}

void TraceResultsSet_traceResults::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Elements )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("elements"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    if(m_DiagramNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("diagramName"), m_DiagramName));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_GlobalFunctionResults )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("globalFunctionResults"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    if(m_KFeaturesForKNNFoundIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("kFeaturesForKNNFound"), m_KFeaturesForKNNFound));
    }
    if(m_StartingPointsIgnoredIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("startingPointsIgnored"), m_StartingPointsIgnored));
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Warnings )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("warnings"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
}

void TraceResultsSet_traceResults::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    {
        m_Elements.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("elements")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("elements"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Elements.push_back( std::shared_ptr<TraceResultsSet_traceResults_elements>(nullptr) );
            }
            else
            {
                std::shared_ptr<TraceResultsSet_traceResults_elements> newItem(new TraceResultsSet_traceResults_elements());
                newItem->fromJson(item);
                m_Elements.push_back( newItem );
            }
        }
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("diagramName")))
    {
        setDiagramName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("diagramName"))));
    }
    {
        m_GlobalFunctionResults.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("globalFunctionResults")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("globalFunctionResults"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_GlobalFunctionResults.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("kFeaturesForKNNFound")))
    {
        setKFeaturesForKNNFound(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("kFeaturesForKNNFound"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("startingPointsIgnored")))
    {
        setStartingPointsIgnored(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("startingPointsIgnored"))));
    }
    {
        m_Warnings.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("warnings")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("warnings"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Warnings.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
}

std::vector<std::shared_ptr<TraceResultsSet_traceResults_elements>>& TraceResultsSet_traceResults::getElements()
{
    return m_Elements;
}

void TraceResultsSet_traceResults::setElements(std::vector<std::shared_ptr<TraceResultsSet_traceResults_elements>> value)
{
    m_Elements = value;
    m_ElementsIsSet = true;
}
bool TraceResultsSet_traceResults::elementsIsSet() const
{
    return m_ElementsIsSet;
}

void TraceResultsSet_traceResults::unsetElements()
{
    m_ElementsIsSet = false;
}

utility::string_t TraceResultsSet_traceResults::getDiagramName() const
{
    return m_DiagramName;
}


void TraceResultsSet_traceResults::setDiagramName(utility::string_t value)
{
    m_DiagramName = value;
    m_DiagramNameIsSet = true;
}
bool TraceResultsSet_traceResults::diagramNameIsSet() const
{
    return m_DiagramNameIsSet;
}

void TraceResultsSet_traceResults::unsetDiagramName()
{
    m_DiagramNameIsSet = false;
}

std::vector<utility::string_t>& TraceResultsSet_traceResults::getGlobalFunctionResults()
{
    return m_GlobalFunctionResults;
}

void TraceResultsSet_traceResults::setGlobalFunctionResults(std::vector<utility::string_t> value)
{
    m_GlobalFunctionResults = value;
    m_GlobalFunctionResultsIsSet = true;
}
bool TraceResultsSet_traceResults::globalFunctionResultsIsSet() const
{
    return m_GlobalFunctionResultsIsSet;
}

void TraceResultsSet_traceResults::unsetGlobalFunctionResults()
{
    m_GlobalFunctionResultsIsSet = false;
}

bool TraceResultsSet_traceResults::isKFeaturesForKNNFound() const
{
    return m_KFeaturesForKNNFound;
}


void TraceResultsSet_traceResults::setKFeaturesForKNNFound(bool value)
{
    m_KFeaturesForKNNFound = value;
    m_KFeaturesForKNNFoundIsSet = true;
}
bool TraceResultsSet_traceResults::kFeaturesForKNNFoundIsSet() const
{
    return m_KFeaturesForKNNFoundIsSet;
}

void TraceResultsSet_traceResults::unsetKFeaturesForKNNFound()
{
    m_KFeaturesForKNNFoundIsSet = false;
}

bool TraceResultsSet_traceResults::isStartingPointsIgnored() const
{
    return m_StartingPointsIgnored;
}


void TraceResultsSet_traceResults::setStartingPointsIgnored(bool value)
{
    m_StartingPointsIgnored = value;
    m_StartingPointsIgnoredIsSet = true;
}
bool TraceResultsSet_traceResults::startingPointsIgnoredIsSet() const
{
    return m_StartingPointsIgnoredIsSet;
}

void TraceResultsSet_traceResults::unsetStartingPointsIgnored()
{
    m_StartingPointsIgnoredIsSet = false;
}

std::vector<utility::string_t>& TraceResultsSet_traceResults::getWarnings()
{
    return m_Warnings;
}

void TraceResultsSet_traceResults::setWarnings(std::vector<utility::string_t> value)
{
    m_Warnings = value;
    m_WarningsIsSet = true;
}
bool TraceResultsSet_traceResults::warningsIsSet() const
{
    return m_WarningsIsSet;
}

void TraceResultsSet_traceResults::unsetWarnings()
{
    m_WarningsIsSet = false;
}

}
}
}
}

