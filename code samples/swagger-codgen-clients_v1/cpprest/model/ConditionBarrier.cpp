/**
 * Swagger for Utility Network
 * Open API Specification (OAS/Swagger)  * **trace**, **updateIsConnected** from the [ArcGIS Utility Network]( https://developers.arcgis.com/rest/services-reference/utility-network-service.htm) * **generateToken** from the [ArcGIS REST API](https://developers.arcgis.com/rest/)  Tested on ArcGIS  Enterprise 10.6.1 using [NSwagStudio](https://github.com/RSuter/NSwag/wiki/NSwagStudio) C# code gen . 
 *
 * OpenAPI spec version: 0.13
 * Contact: 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "ConditionBarrier.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

ConditionBarrier::ConditionBarrier()
{
    m_NetworkAttributeName = utility::conversions::to_string_t("");
    m__operator = utility::conversions::to_string_t("");
    m_Value = 0.0;
    m_CombineUsingOr = false;
    m_IsTypeSpecificValue = false;
}

ConditionBarrier::~ConditionBarrier()
{
}

void ConditionBarrier::validate()
{
    // TODO: implement validation
}

web::json::value ConditionBarrier::toJson() const
{
    web::json::value val = web::json::value::object();

    val[utility::conversions::to_string_t("networkAttributeName")] = ModelBase::toJson(m_NetworkAttributeName);
    val[utility::conversions::to_string_t("operator")] = ModelBase::toJson(m__operator);
    val[utility::conversions::to_string_t("value")] = ModelBase::toJson(m_Value);
    val[utility::conversions::to_string_t("combineUsingOr")] = ModelBase::toJson(m_CombineUsingOr);
    val[utility::conversions::to_string_t("isTypeSpecificValue")] = ModelBase::toJson(m_IsTypeSpecificValue);

    return val;
}

void ConditionBarrier::fromJson(web::json::value& val)
{
    setNetworkAttributeName(ModelBase::stringFromJson(val[utility::conversions::to_string_t("networkAttributeName")]));
    setOperator(ModelBase::stringFromJson(val[utility::conversions::to_string_t("operator")]));
    setValue(ModelBase::doubleFromJson(val[utility::conversions::to_string_t("value")]));
    setCombineUsingOr(ModelBase::boolFromJson(val[utility::conversions::to_string_t("combineUsingOr")]));
    setIsTypeSpecificValue(ModelBase::boolFromJson(val[utility::conversions::to_string_t("isTypeSpecificValue")]));
}

void ConditionBarrier::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("networkAttributeName"), m_NetworkAttributeName));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("operator"), m__operator));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("value"), m_Value));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("combineUsingOr"), m_CombineUsingOr));
    multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isTypeSpecificValue"), m_IsTypeSpecificValue));
}

void ConditionBarrier::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    setNetworkAttributeName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("networkAttributeName"))));
    setOperator(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("operator"))));
    setValue(ModelBase::doubleFromHttpContent(multipart->getContent(utility::conversions::to_string_t("value"))));
    setCombineUsingOr(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("combineUsingOr"))));
    setIsTypeSpecificValue(ModelBase::boolFromHttpContent(multipart->getContent(utility::conversions::to_string_t("isTypeSpecificValue"))));
}

utility::string_t ConditionBarrier::getNetworkAttributeName() const
{
    return m_NetworkAttributeName;
}


void ConditionBarrier::setNetworkAttributeName(utility::string_t value)
{
    m_NetworkAttributeName = value;
    
}
utility::string_t ConditionBarrier::getOperator() const
{
    return m__operator;
}


void ConditionBarrier::setOperator(utility::string_t value)
{
    m__operator = value;
    
}
double ConditionBarrier::getValue() const
{
    return m_Value;
}


void ConditionBarrier::setValue(double value)
{
    m_Value = value;
    
}
bool ConditionBarrier::isCombineUsingOr() const
{
    return m_CombineUsingOr;
}


void ConditionBarrier::setCombineUsingOr(bool value)
{
    m_CombineUsingOr = value;
    
}
bool ConditionBarrier::isIsTypeSpecificValue() const
{
    return m_IsTypeSpecificValue;
}


void ConditionBarrier::setIsTypeSpecificValue(bool value)
{
    m_IsTypeSpecificValue = value;
    
}
}
}
}
}

