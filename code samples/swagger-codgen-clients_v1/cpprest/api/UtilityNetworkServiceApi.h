/**
 * Swagger for Utility Network
 * Open API Specification (OAS/Swagger)  * **trace**, **updateIsConnected** from the [ArcGIS Utility Network]( https://developers.arcgis.com/rest/services-reference/utility-network-service.htm) * **generateToken** from the [ArcGIS REST API](https://developers.arcgis.com/rest/)  Tested on ArcGIS  Enterprise 10.6.1 using [NSwagStudio](https://github.com/RSuter/NSwag/wiki/NSwagStudio) C# code gen . 
 *
 * OpenAPI spec version: 0.13
 * Contact: 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * UtilityNetworkServiceApi.h
 *
 * 
 */

#ifndef IO_SWAGGER_CLIENT_API_UtilityNetworkServiceApi_H_
#define IO_SWAGGER_CLIENT_API_UtilityNetworkServiceApi_H_


#include "../ApiClient.h"

#include "TokenResponse.h"
#include "TraceResultsSet.h"
#include <cpprest/details/basic_types.h>

#include <boost/optional.hpp>

namespace io {
namespace swagger {
namespace client {
namespace api {

using namespace io::swagger::client::model;

class  UtilityNetworkServiceApi
{
public:
    UtilityNetworkServiceApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~UtilityNetworkServiceApi();
    /// <summary>
    /// generateToken
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="portalWebAdaptor"></param>
    /// <param name="username"></param>
    /// <param name="password"></param>
    /// <param name="expiration"></param>
    /// <param name="f"></param>
    /// <param name="ip"> (optional)</param>
    /// <param name="referer"> (optional)</param>
    pplx::task<std::shared_ptr<TokenResponse>> portalWebAdaptorSharingRestGenerateTokenPost(
        utility::string_t portalWebAdaptor,
        utility::string_t username,
        utility::string_t password,
        double expiration,
        utility::string_t f,
        boost::optional<utility::string_t> ip,
        boost::optional<utility::string_t> referer
    );
    /// <summary>
    /// trace
    /// </summary>
    /// <remarks>
    /// Trace
    /// </remarks>
    /// <param name="serverWebAdaptor"></param>
    /// <param name="utilityNetworkName"></param>
    /// <param name="token"></param>
    /// <param name="f">Optional parameter representing the output format of the response (default is JSON).</param>
    /// <param name="traceType">The trace type.</param>
    /// <param name="traceLocations">***Curently a workaround until figure out how to gen**The locations for starting and stopping points, as well as barriers. Optional parameter for subnetwork trace type, required parameter for all other trace types.</param>
    /// <param name="traceConfiguration">The locations for starting and stopping points, as well as barriers. Optional parameter for subnetwork trace type, required parameter for all other trace types.</param>
    /// <param name="gdbVersion">The name of the geodatabase version. (optional, default to sde.DEFAULT)</param>
    /// <param name="sessionId">Optional parameter representing the token (guid) used to lock the version. If the calling client has previously started a service session (editing) and holds an exclusive lock on the specified version, the request will fail if the sessionId is not provided. If the specified version is currently locked by any other session, the request will fail if the sessionId is not provided or does not match the sessionId which holds the exclusive lock. (optional, default to &quot;&quot;)</param>
    /// <param name="moment">Optional parameter representing the session moment (the default is the version current moment). This should only be specified by the client when they do not want to use the current moment. (optional)</param>
    pplx::task<std::shared_ptr<TraceResultsSet>> trace(
        utility::string_t serverWebAdaptor,
        utility::string_t utilityNetworkName,
        utility::string_t token,
        utility::string_t f,
        utility::string_t traceType,
        utility::string_t traceLocations,
        utility::string_t traceConfiguration,
        boost::optional<utility::string_t> gdbVersion,
        boost::optional<utility::string_t> sessionId,
        boost::optional<utility::string_t> moment
    );

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* IO_SWAGGER_CLIENT_API_UtilityNetworkServiceApi_H_ */

