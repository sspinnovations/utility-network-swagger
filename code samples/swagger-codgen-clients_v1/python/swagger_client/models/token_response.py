# coding: utf-8

"""
    Swagger for Utility Network

    Open API Specification (OAS/Swagger)  * **trace**, **updateIsConnected** from the [ArcGIS Utility Network]( https://developers.arcgis.com/rest/services-reference/utility-network-service.htm) * **generateToken** from the [ArcGIS REST API](https://developers.arcgis.com/rest/)  Tested on ArcGIS  Enterprise 10.6.1 using [NSwagStudio](https://github.com/RSuter/NSwag/wiki/NSwagStudio) C# code gen .   # noqa: E501

    OpenAPI spec version: 0.13
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.token_response_error import TokenResponseError  # noqa: F401,E501


class TokenResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'token': 'str',
        'expires': 'float',
        'ssl': 'bool',
        'error': 'TokenResponseError'
    }

    attribute_map = {
        'token': 'token',
        'expires': 'expires',
        'ssl': 'ssl',
        'error': 'error'
    }

    def __init__(self, token=None, expires=None, ssl=None, error=None):  # noqa: E501
        """TokenResponse - a model defined in Swagger"""  # noqa: E501

        self._token = None
        self._expires = None
        self._ssl = None
        self._error = None
        self.discriminator = None

        if token is not None:
            self.token = token
        if expires is not None:
            self.expires = expires
        if ssl is not None:
            self.ssl = ssl
        if error is not None:
            self.error = error

    @property
    def token(self):
        """Gets the token of this TokenResponse.  # noqa: E501

        The generated token.  # noqa: E501

        :return: The token of this TokenResponse.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this TokenResponse.

        The generated token.  # noqa: E501

        :param token: The token of this TokenResponse.  # noqa: E501
        :type: str
        """

        self._token = token

    @property
    def expires(self):
        """Gets the expires of this TokenResponse.  # noqa: E501

        The expiration time of the token in milliseconds since Jan. 1, 1970 (UTC).  # noqa: E501

        :return: The expires of this TokenResponse.  # noqa: E501
        :rtype: float
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this TokenResponse.

        The expiration time of the token in milliseconds since Jan. 1, 1970 (UTC).  # noqa: E501

        :param expires: The expires of this TokenResponse.  # noqa: E501
        :type: float
        """

        self._expires = expires

    @property
    def ssl(self):
        """Gets the ssl of this TokenResponse.  # noqa: E501

        True if the token must always pass over ssl.  # noqa: E501

        :return: The ssl of this TokenResponse.  # noqa: E501
        :rtype: bool
        """
        return self._ssl

    @ssl.setter
    def ssl(self, ssl):
        """Sets the ssl of this TokenResponse.

        True if the token must always pass over ssl.  # noqa: E501

        :param ssl: The ssl of this TokenResponse.  # noqa: E501
        :type: bool
        """

        self._ssl = ssl

    @property
    def error(self):
        """Gets the error of this TokenResponse.  # noqa: E501


        :return: The error of this TokenResponse.  # noqa: E501
        :rtype: TokenResponseError
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this TokenResponse.


        :param error: The error of this TokenResponse.  # noqa: E501
        :type: TokenResponseError
        """

        self._error = error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TokenResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TokenResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
