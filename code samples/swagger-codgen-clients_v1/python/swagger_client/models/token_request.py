# coding: utf-8

"""
    Swagger for Utility Network

    Open API Specification (OAS/Swagger)  * **trace**, **updateIsConnected** from the [ArcGIS Utility Network]( https://developers.arcgis.com/rest/services-reference/utility-network-service.htm) * **generateToken** from the [ArcGIS REST API](https://developers.arcgis.com/rest/)  Tested on ArcGIS  Enterprise 10.6.1 using [NSwagStudio](https://github.com/RSuter/NSwag/wiki/NSwagStudio) C# code gen .   # noqa: E501

    OpenAPI spec version: 0.13
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TokenRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'username': 'str',
        'password': 'str',
        'ip': 'str',
        'referer': 'str',
        'expiration': 'float',
        'f': 'str'
    }

    attribute_map = {
        'username': 'username',
        'password': 'password',
        'ip': 'ip',
        'referer': 'referer',
        'expiration': 'expiration',
        'f': 'f'
    }

    def __init__(self, username=None, password=None, ip=None, referer=None, expiration=None, f='json'):  # noqa: E501
        """TokenRequest - a model defined in Swagger"""  # noqa: E501

        self._username = None
        self._password = None
        self._ip = None
        self._referer = None
        self._expiration = None
        self._f = None
        self.discriminator = None

        self.username = username
        self.password = password
        if ip is not None:
            self.ip = ip
        if referer is not None:
            self.referer = referer
        self.expiration = expiration
        self.f = f

    @property
    def username(self):
        """Gets the username of this TokenRequest.  # noqa: E501


        :return: The username of this TokenRequest.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this TokenRequest.


        :param username: The username of this TokenRequest.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def password(self):
        """Gets the password of this TokenRequest.  # noqa: E501


        :return: The password of this TokenRequest.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this TokenRequest.


        :param password: The password of this TokenRequest.  # noqa: E501
        :type: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def ip(self):
        """Gets the ip of this TokenRequest.  # noqa: E501


        :return: The ip of this TokenRequest.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this TokenRequest.


        :param ip: The ip of this TokenRequest.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def referer(self):
        """Gets the referer of this TokenRequest.  # noqa: E501


        :return: The referer of this TokenRequest.  # noqa: E501
        :rtype: str
        """
        return self._referer

    @referer.setter
    def referer(self, referer):
        """Sets the referer of this TokenRequest.


        :param referer: The referer of this TokenRequest.  # noqa: E501
        :type: str
        """

        self._referer = referer

    @property
    def expiration(self):
        """Gets the expiration of this TokenRequest.  # noqa: E501


        :return: The expiration of this TokenRequest.  # noqa: E501
        :rtype: float
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this TokenRequest.


        :param expiration: The expiration of this TokenRequest.  # noqa: E501
        :type: float
        """
        if expiration is None:
            raise ValueError("Invalid value for `expiration`, must not be `None`")  # noqa: E501

        self._expiration = expiration

    @property
    def f(self):
        """Gets the f of this TokenRequest.  # noqa: E501


        :return: The f of this TokenRequest.  # noqa: E501
        :rtype: str
        """
        return self._f

    @f.setter
    def f(self, f):
        """Sets the f of this TokenRequest.


        :param f: The f of this TokenRequest.  # noqa: E501
        :type: str
        """
        if f is None:
            raise ValueError("Invalid value for `f`, must not be `None`")  # noqa: E501

        self._f = f

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TokenRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TokenRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
