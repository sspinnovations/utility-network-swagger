# coding: utf-8

"""
    Swagger for Utility Network

    Open API Specification (OAS/Swagger)  * **trace**, **updateIsConnected** from the [ArcGIS Utility Network]( https://developers.arcgis.com/rest/services-reference/utility-network-service.htm) * **generateToken** from the [ArcGIS REST API](https://developers.arcgis.com/rest/)  Tested on ArcGIS  Enterprise 10.6.1 using [NSwagStudio](https://github.com/RSuter/NSwag/wiki/NSwagStudio) C# code gen .   # noqa: E501

    OpenAPI spec version: 0.13
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.token_response_error import TokenResponseError  # noqa: F401,E501


class UpdateIsConnectedResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'moment': 'float',
        'success': 'str',
        'error': 'TokenResponseError'
    }

    attribute_map = {
        'moment': 'moment',
        'success': 'success',
        'error': 'error'
    }

    def __init__(self, moment=None, success=None, error=None):  # noqa: E501
        """UpdateIsConnectedResponse - a model defined in Swagger"""  # noqa: E501

        self._moment = None
        self._success = None
        self._error = None
        self.discriminator = None

        if moment is not None:
            self.moment = moment
        if success is not None:
            self.success = success
        if error is not None:
            self.error = error

    @property
    def moment(self):
        """Gets the moment of this UpdateIsConnectedResponse.  # noqa: E501


        :return: The moment of this UpdateIsConnectedResponse.  # noqa: E501
        :rtype: float
        """
        return self._moment

    @moment.setter
    def moment(self, moment):
        """Sets the moment of this UpdateIsConnectedResponse.


        :param moment: The moment of this UpdateIsConnectedResponse.  # noqa: E501
        :type: float
        """

        self._moment = moment

    @property
    def success(self):
        """Gets the success of this UpdateIsConnectedResponse.  # noqa: E501


        :return: The success of this UpdateIsConnectedResponse.  # noqa: E501
        :rtype: str
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this UpdateIsConnectedResponse.


        :param success: The success of this UpdateIsConnectedResponse.  # noqa: E501
        :type: str
        """

        self._success = success

    @property
    def error(self):
        """Gets the error of this UpdateIsConnectedResponse.  # noqa: E501


        :return: The error of this UpdateIsConnectedResponse.  # noqa: E501
        :rtype: TokenResponseError
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this UpdateIsConnectedResponse.


        :param error: The error of this UpdateIsConnectedResponse.  # noqa: E501
        :type: TokenResponseError
        """

        self._error = error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateIsConnectedResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateIsConnectedResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
