# coding: utf-8

"""
    Swagger for Utility Network

    Open API Specification (OAS/Swagger)  * **trace**, **updateIsConnected** from the [ArcGIS Utility Network]( https://developers.arcgis.com/rest/services-reference/utility-network-service.htm) * **generateToken** from the [ArcGIS REST API](https://developers.arcgis.com/rest/)  Tested on ArcGIS  Enterprise 10.6.1 using [NSwagStudio](https://github.com/RSuter/NSwag/wiki/NSwagStudio) C# code gen .   # noqa: E501

    OpenAPI spec version: 0.13
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TraceLocation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'trace_location_type': 'str',
        'global_id': 'str',
        'percent_along': 'float'
    }

    attribute_map = {
        'trace_location_type': 'traceLocationType',
        'global_id': 'globalId',
        'percent_along': 'percentAlong'
    }

    def __init__(self, trace_location_type=None, global_id=None, percent_along=None):  # noqa: E501
        """TraceLocation - a model defined in Swagger"""  # noqa: E501

        self._trace_location_type = None
        self._global_id = None
        self._percent_along = None
        self.discriminator = None

        if trace_location_type is not None:
            self.trace_location_type = trace_location_type
        if global_id is not None:
            self.global_id = global_id
        if percent_along is not None:
            self.percent_along = percent_along

    @property
    def trace_location_type(self):
        """Gets the trace_location_type of this TraceLocation.  # noqa: E501


        :return: The trace_location_type of this TraceLocation.  # noqa: E501
        :rtype: str
        """
        return self._trace_location_type

    @trace_location_type.setter
    def trace_location_type(self, trace_location_type):
        """Sets the trace_location_type of this TraceLocation.


        :param trace_location_type: The trace_location_type of this TraceLocation.  # noqa: E501
        :type: str
        """
        allowed_values = ["startingPoint", "stoppingPoint"]  # noqa: E501
        if trace_location_type not in allowed_values:
            raise ValueError(
                "Invalid value for `trace_location_type` ({0}), must be one of {1}"  # noqa: E501
                .format(trace_location_type, allowed_values)
            )

        self._trace_location_type = trace_location_type

    @property
    def global_id(self):
        """Gets the global_id of this TraceLocation.  # noqa: E501


        :return: The global_id of this TraceLocation.  # noqa: E501
        :rtype: str
        """
        return self._global_id

    @global_id.setter
    def global_id(self, global_id):
        """Sets the global_id of this TraceLocation.


        :param global_id: The global_id of this TraceLocation.  # noqa: E501
        :type: str
        """

        self._global_id = global_id

    @property
    def percent_along(self):
        """Gets the percent_along of this TraceLocation.  # noqa: E501


        :return: The percent_along of this TraceLocation.  # noqa: E501
        :rtype: float
        """
        return self._percent_along

    @percent_along.setter
    def percent_along(self, percent_along):
        """Sets the percent_along of this TraceLocation.


        :param percent_along: The percent_along of this TraceLocation.  # noqa: E501
        :type: float
        """

        self._percent_along = percent_along

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TraceLocation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TraceLocation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
