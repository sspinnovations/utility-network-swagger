# coding: utf-8

"""
    Swagger for Utility Network

    Open API Specification (OAS/Swagger)  * **trace**, **updateIsConnected** from the [ArcGIS Utility Network]( https://developers.arcgis.com/rest/services-reference/utility-network-service.htm) * **generateToken** from the [ArcGIS REST API](https://developers.arcgis.com/rest/)  Tested on ArcGIS  Enterprise 10.6.1 using [NSwagStudio](https://github.com/RSuter/NSwag/wiki/NSwagStudio) C# code gen .   # noqa: E501

    OpenAPI spec version: 0.13
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class UtilityNetworkServiceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def portal_web_adaptor_sharing_rest_generate_token_post(self, portal_web_adaptor, username, password, expiration, f, **kwargs):  # noqa: E501
        """generateToken  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.portal_web_adaptor_sharing_rest_generate_token_post(portal_web_adaptor, username, password, expiration, f, async=True)
        >>> result = thread.get()

        :param async bool
        :param str portal_web_adaptor: (required)
        :param str username: (required)
        :param str password: (required)
        :param float expiration: (required)
        :param str f: (required)
        :param str ip:
        :param str referer:
        :return: TokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.portal_web_adaptor_sharing_rest_generate_token_post_with_http_info(portal_web_adaptor, username, password, expiration, f, **kwargs)  # noqa: E501
        else:
            (data) = self.portal_web_adaptor_sharing_rest_generate_token_post_with_http_info(portal_web_adaptor, username, password, expiration, f, **kwargs)  # noqa: E501
            return data

    def portal_web_adaptor_sharing_rest_generate_token_post_with_http_info(self, portal_web_adaptor, username, password, expiration, f, **kwargs):  # noqa: E501
        """generateToken  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.portal_web_adaptor_sharing_rest_generate_token_post_with_http_info(portal_web_adaptor, username, password, expiration, f, async=True)
        >>> result = thread.get()

        :param async bool
        :param str portal_web_adaptor: (required)
        :param str username: (required)
        :param str password: (required)
        :param float expiration: (required)
        :param str f: (required)
        :param str ip:
        :param str referer:
        :return: TokenResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['portal_web_adaptor', 'username', 'password', 'expiration', 'f', 'ip', 'referer']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method portal_web_adaptor_sharing_rest_generate_token_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'portal_web_adaptor' is set
        if ('portal_web_adaptor' not in params or
                params['portal_web_adaptor'] is None):
            raise ValueError("Missing the required parameter `portal_web_adaptor` when calling `portal_web_adaptor_sharing_rest_generate_token_post`")  # noqa: E501
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `portal_web_adaptor_sharing_rest_generate_token_post`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `portal_web_adaptor_sharing_rest_generate_token_post`")  # noqa: E501
        # verify the required parameter 'expiration' is set
        if ('expiration' not in params or
                params['expiration'] is None):
            raise ValueError("Missing the required parameter `expiration` when calling `portal_web_adaptor_sharing_rest_generate_token_post`")  # noqa: E501
        # verify the required parameter 'f' is set
        if ('f' not in params or
                params['f'] is None):
            raise ValueError("Missing the required parameter `f` when calling `portal_web_adaptor_sharing_rest_generate_token_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'portal_web_adaptor' in params:
            path_params['PortalWebAdaptor'] = params['portal_web_adaptor']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'username' in params:
            form_params.append(('username', params['username']))  # noqa: E501
        if 'password' in params:
            form_params.append(('password', params['password']))  # noqa: E501
        if 'ip' in params:
            form_params.append(('ip', params['ip']))  # noqa: E501
        if 'referer' in params:
            form_params.append(('referer', params['referer']))  # noqa: E501
        if 'expiration' in params:
            form_params.append(('expiration', params['expiration']))  # noqa: E501
        if 'f' in params:
            form_params.append(('f', params['f']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{PortalWebAdaptor}/sharing/rest/generateToken', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TokenResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def trace(self, server_web_adaptor, utility_network_name, token, f, trace_type, trace_locations, trace_configuration, **kwargs):  # noqa: E501
        """trace  # noqa: E501

        Trace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.trace(server_web_adaptor, utility_network_name, token, f, trace_type, trace_locations, trace_configuration, async=True)
        >>> result = thread.get()

        :param async bool
        :param str server_web_adaptor: (required)
        :param str utility_network_name: (required)
        :param str token: (required)
        :param str f: Optional parameter representing the output format of the response (default is JSON). (required)
        :param str trace_type: The trace type. (required)
        :param str trace_locations: ***Curently a workaround until figure out how to gen**The locations for starting and stopping points, as well as barriers. Optional parameter for subnetwork trace type, required parameter for all other trace types. (required)
        :param str trace_configuration: The locations for starting and stopping points, as well as barriers. Optional parameter for subnetwork trace type, required parameter for all other trace types. (required)
        :param str gdb_version: The name of the geodatabase version.
        :param str session_id: Optional parameter representing the token (guid) used to lock the version. If the calling client has previously started a service session (editing) and holds an exclusive lock on the specified version, the request will fail if the sessionId is not provided. If the specified version is currently locked by any other session, the request will fail if the sessionId is not provided or does not match the sessionId which holds the exclusive lock.
        :param str moment: Optional parameter representing the session moment (the default is the version current moment). This should only be specified by the client when they do not want to use the current moment.
        :return: TraceResultsSet
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.trace_with_http_info(server_web_adaptor, utility_network_name, token, f, trace_type, trace_locations, trace_configuration, **kwargs)  # noqa: E501
        else:
            (data) = self.trace_with_http_info(server_web_adaptor, utility_network_name, token, f, trace_type, trace_locations, trace_configuration, **kwargs)  # noqa: E501
            return data

    def trace_with_http_info(self, server_web_adaptor, utility_network_name, token, f, trace_type, trace_locations, trace_configuration, **kwargs):  # noqa: E501
        """trace  # noqa: E501

        Trace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.trace_with_http_info(server_web_adaptor, utility_network_name, token, f, trace_type, trace_locations, trace_configuration, async=True)
        >>> result = thread.get()

        :param async bool
        :param str server_web_adaptor: (required)
        :param str utility_network_name: (required)
        :param str token: (required)
        :param str f: Optional parameter representing the output format of the response (default is JSON). (required)
        :param str trace_type: The trace type. (required)
        :param str trace_locations: ***Curently a workaround until figure out how to gen**The locations for starting and stopping points, as well as barriers. Optional parameter for subnetwork trace type, required parameter for all other trace types. (required)
        :param str trace_configuration: The locations for starting and stopping points, as well as barriers. Optional parameter for subnetwork trace type, required parameter for all other trace types. (required)
        :param str gdb_version: The name of the geodatabase version.
        :param str session_id: Optional parameter representing the token (guid) used to lock the version. If the calling client has previously started a service session (editing) and holds an exclusive lock on the specified version, the request will fail if the sessionId is not provided. If the specified version is currently locked by any other session, the request will fail if the sessionId is not provided or does not match the sessionId which holds the exclusive lock.
        :param str moment: Optional parameter representing the session moment (the default is the version current moment). This should only be specified by the client when they do not want to use the current moment.
        :return: TraceResultsSet
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['server_web_adaptor', 'utility_network_name', 'token', 'f', 'trace_type', 'trace_locations', 'trace_configuration', 'gdb_version', 'session_id', 'moment']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method trace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'server_web_adaptor' is set
        if ('server_web_adaptor' not in params or
                params['server_web_adaptor'] is None):
            raise ValueError("Missing the required parameter `server_web_adaptor` when calling `trace`")  # noqa: E501
        # verify the required parameter 'utility_network_name' is set
        if ('utility_network_name' not in params or
                params['utility_network_name'] is None):
            raise ValueError("Missing the required parameter `utility_network_name` when calling `trace`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `trace`")  # noqa: E501
        # verify the required parameter 'f' is set
        if ('f' not in params or
                params['f'] is None):
            raise ValueError("Missing the required parameter `f` when calling `trace`")  # noqa: E501
        # verify the required parameter 'trace_type' is set
        if ('trace_type' not in params or
                params['trace_type'] is None):
            raise ValueError("Missing the required parameter `trace_type` when calling `trace`")  # noqa: E501
        # verify the required parameter 'trace_locations' is set
        if ('trace_locations' not in params or
                params['trace_locations'] is None):
            raise ValueError("Missing the required parameter `trace_locations` when calling `trace`")  # noqa: E501
        # verify the required parameter 'trace_configuration' is set
        if ('trace_configuration' not in params or
                params['trace_configuration'] is None):
            raise ValueError("Missing the required parameter `trace_configuration` when calling `trace`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'server_web_adaptor' in params:
            path_params['ServerWebAdaptor'] = params['server_web_adaptor']  # noqa: E501
        if 'utility_network_name' in params:
            path_params['UtilityNetworkName'] = params['utility_network_name']  # noqa: E501

        query_params = []
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'f' in params:
            form_params.append(('f', params['f']))  # noqa: E501
        if 'gdb_version' in params:
            form_params.append(('gdbVersion', params['gdb_version']))  # noqa: E501
        if 'session_id' in params:
            form_params.append(('sessionId', params['session_id']))  # noqa: E501
        if 'moment' in params:
            form_params.append(('moment', params['moment']))  # noqa: E501
        if 'trace_type' in params:
            form_params.append(('traceType', params['trace_type']))  # noqa: E501
        if 'trace_locations' in params:
            form_params.append(('traceLocations', params['trace_locations']))  # noqa: E501
        if 'trace_configuration' in params:
            form_params.append(('traceConfiguration', params['trace_configuration']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{ServerWebAdaptor}/rest/services/{UtilityNetworkName}/UtilityNetworkServer/trace', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TraceResultsSet',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
