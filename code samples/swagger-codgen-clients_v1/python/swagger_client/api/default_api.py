# coding: utf-8

"""
    Swagger for Utility Network

    Open API Specification (OAS/Swagger)  * **trace**, **updateIsConnected** from the [ArcGIS Utility Network]( https://developers.arcgis.com/rest/services-reference/utility-network-service.htm) * **generateToken** from the [ArcGIS REST API](https://developers.arcgis.com/rest/)  Tested on ArcGIS  Enterprise 10.6.1 using [NSwagStudio](https://github.com/RSuter/NSwag/wiki/NSwagStudio) C# code gen .   # noqa: E501

    OpenAPI spec version: 0.13
    Contact: 
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def server_web_adaptor_rest_services_utility_network_name_utility_network_server_update_is_connected_post(self, server_web_adaptor, utility_network_name, f, token, **kwargs):  # noqa: E501
        """updateIsConnected  # noqa: E501

        UtilityNetworkService  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.server_web_adaptor_rest_services_utility_network_name_utility_network_server_update_is_connected_post(server_web_adaptor, utility_network_name, f, token, async=True)
        >>> result = thread.get()

        :param async bool
        :param str server_web_adaptor: (required)
        :param str utility_network_name: (required)
        :param str f: (required)
        :param str token: (required)
        :return: UpdateIsConnectedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.server_web_adaptor_rest_services_utility_network_name_utility_network_server_update_is_connected_post_with_http_info(server_web_adaptor, utility_network_name, f, token, **kwargs)  # noqa: E501
        else:
            (data) = self.server_web_adaptor_rest_services_utility_network_name_utility_network_server_update_is_connected_post_with_http_info(server_web_adaptor, utility_network_name, f, token, **kwargs)  # noqa: E501
            return data

    def server_web_adaptor_rest_services_utility_network_name_utility_network_server_update_is_connected_post_with_http_info(self, server_web_adaptor, utility_network_name, f, token, **kwargs):  # noqa: E501
        """updateIsConnected  # noqa: E501

        UtilityNetworkService  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.server_web_adaptor_rest_services_utility_network_name_utility_network_server_update_is_connected_post_with_http_info(server_web_adaptor, utility_network_name, f, token, async=True)
        >>> result = thread.get()

        :param async bool
        :param str server_web_adaptor: (required)
        :param str utility_network_name: (required)
        :param str f: (required)
        :param str token: (required)
        :return: UpdateIsConnectedResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['server_web_adaptor', 'utility_network_name', 'f', 'token']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method server_web_adaptor_rest_services_utility_network_name_utility_network_server_update_is_connected_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'server_web_adaptor' is set
        if ('server_web_adaptor' not in params or
                params['server_web_adaptor'] is None):
            raise ValueError("Missing the required parameter `server_web_adaptor` when calling `server_web_adaptor_rest_services_utility_network_name_utility_network_server_update_is_connected_post`")  # noqa: E501
        # verify the required parameter 'utility_network_name' is set
        if ('utility_network_name' not in params or
                params['utility_network_name'] is None):
            raise ValueError("Missing the required parameter `utility_network_name` when calling `server_web_adaptor_rest_services_utility_network_name_utility_network_server_update_is_connected_post`")  # noqa: E501
        # verify the required parameter 'f' is set
        if ('f' not in params or
                params['f'] is None):
            raise ValueError("Missing the required parameter `f` when calling `server_web_adaptor_rest_services_utility_network_name_utility_network_server_update_is_connected_post`")  # noqa: E501
        # verify the required parameter 'token' is set
        if ('token' not in params or
                params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `server_web_adaptor_rest_services_utility_network_name_utility_network_server_update_is_connected_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'server_web_adaptor' in params:
            path_params['ServerWebAdaptor'] = params['server_web_adaptor']  # noqa: E501
        if 'utility_network_name' in params:
            path_params['UtilityNetworkName'] = params['utility_network_name']  # noqa: E501

        query_params = []
        if 'f' in params:
            query_params.append(('f', params['f']))  # noqa: E501
        if 'token' in params:
            query_params.append(('token', params['token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/{ServerWebAdaptor}/rest/services/{UtilityNetworkName}/UtilityNetworkServer/updateIsConnected', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpdateIsConnectedResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
